import { buildEmbedding } from "../embedding-helpers"
import type { SiteEmbeddingInput } from "../embedding-input-types"

export const embeddingTextForSite = ({
	name,
	description,
	type,
	intendedSiteFunction,
	terrain,
	climate,
	mood,
	environment,
	locationHierarchy,
	descriptors,
	creatures,
	features,
	treasures,
	lightingDescription,
	soundscape,
	smells,
	weather,
	coverOptions,
	elevationFeatures,
	movementRoutes,
	difficultTerrain,
	chokePoints,
	sightLines,
	tacticalPositions,
	interactiveElements,
	environmentalHazards,
	siteEncounters,
	hiddenSecrets,
	siteConnections,
	npcsCurrentlyPresent,
	npcGeneralAssociations,
	questStagesLocatedHere,
	relatedItems,
	siteFactionInfluence,
	relevantWorldConcepts,
}: SiteEmbeddingInput): string => {
	return buildEmbedding({
		site: name,
		overview: description,
		type,
		intendedSiteFunction,
		terrain,
		climate,
		mood,
		environment,
		locationHierarchy: {
			area: locationHierarchy.area?.name,
			areaType: locationHierarchy.area?.type,
			region: locationHierarchy.region?.name,
			regionType: locationHierarchy.region?.type,
		},
		descriptors,
		creatures,
		features,
		treasures,
		lightingDescription,
		soundscape,
		smells,
		weather,
		coverOptions,
		elevationFeatures,
		movementRoutes,
		difficultTerrain,
		chokePoints,
		sightLines,
		tacticalPositions,
		interactiveElements,
		environmentalHazards,
		siteEncounters: siteEncounters?.map(
			({ name, encounterType, dangerLevel, difficulty, creatures, treasure, description }) => ({
				encounter: name,
				encounterType,
				dangerLevel,
				difficulty,
				creatures,
				treasure,
				description,
			}),
		),
		hiddenSecrets: hiddenSecrets?.map(
			({ secretType, difficultyToDiscover, discoveryMethod, consequences, description }) => ({
				secretType,
				difficultyToDiscover,
				discoveryMethod,
				consequences,
				description,
			}),
		),
		siteConnections: siteConnections?.map(({ linkType, description, linkedSite }) => ({
			connectedSite: linkedSite,
			linkType,
			description,
		})),
		npcsCurrentlyPresent: npcsCurrentlyPresent?.map(({ name, occupation, disposition, currentGoals }) => ({
			npc: name,
			occupation,
			disposition,
			currentGoals,
		})),
		npcGeneralAssociations: npcGeneralAssociations?.map(({ associationType, description, npcInfo }) => ({
			npc: npcInfo,
			associationType,
			description,
		})),
		questStagesLocatedHere: questStagesLocatedHere?.map(
			({ name, stageOrder, stageImportance, dramatic_question, parentQuest }) => ({
				stage: name,
				quest: parentQuest,
				stageOrder,
				stageImportance,
				dramaticQuestion: dramatic_question,
			}),
		),
		relatedItems: relatedItems?.map(({ relationshipType, relationshipDetails, description, itemInfo }) => ({
			item: itemInfo,
			relationshipType,
			relationshipDetails,
			description,
		})),
		siteFactionInfluence: siteFactionInfluence?.map(
			({ influenceLevel, presenceTypes, presenceDetails, priorities, description, factionInfo }) => ({
				faction: factionInfo,
				influenceLevel,
				presenceTypes,
				presenceDetails,
				priorities,
				description,
			}),
		),
		relevantWorldConcepts: relevantWorldConcepts?.map(
			({ linkRoleOrTypeText, linkStrength, linkDetailsText, description, conceptInfo }) => ({
				concept: conceptInfo,
				linkRole: linkRoleOrTypeText,
				linkStrength,
				linkDetails: linkDetailsText,
				description,
			}),
		),
	})
}
