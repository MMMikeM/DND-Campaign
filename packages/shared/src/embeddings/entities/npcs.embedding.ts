import { buildEmbedding } from "../embedding-helpers"
import type { NpcEmbeddingInput } from "../embedding-input-types"

export const embeddingTextForNpc = ({
	name,
	race,
	gender,
	age,
	occupation,
	alignment,
	socialStatus,
	wealth,
	disposition,
	attitude,
	trustLevel,
	adaptability,
	complexityProfile,
	playerPerceptionGoal,
	availability,
	capability,
	proactivity,
	relatability,
	quirk,
	description,
	currentGoals,
	appearance,
	avoidTopics,
	background,
	biases,
	dialogue,
	drives,
	fears,
	knowledge,
	mannerisms,
	personalityTraits,
	preferredTopics,
	rumours,
	secrets,
	voiceNotes,
	currentLocation,
	factionAffiliations,
	associatedSites,
	relationshipsWithOtherNpcs,
	conflictInvolvement,
	questInvolvement,
	worldConceptConnections,
	significantItems,
}: NpcEmbeddingInput): string => {
	return buildEmbedding({
		npc: name,
		overview: description,
		race,
		gender,
		age,
		occupation,
		alignment,
		socialStatus,
		wealth,
		disposition,
		attitude,
		trustLevel,
		adaptability,
		complexityProfile,
		playerPerceptionGoal,
		availability,
		capability,
		proactivity,
		relatability,
		quirk,
		currentGoals,
		appearance,
		background,
		personalityTraits,
		mannerisms,
		dialogue,
		voiceNotes,
		drives,
		fears,
		biases,
		knowledge,
		preferredTopics,
		avoidTopics,
		rumours,
		secrets,
		currentLocation: {
			site: currentLocation?.name,
			type: currentLocation?.type,
			mood: currentLocation?.mood,
			environment: currentLocation?.environment,
		},
		factionAffiliations: factionAffiliations?.map(
			({ role, rank, loyalty, justification, description, factionInfo, secrets }) => ({
				faction: factionInfo.name,
				factionType: factionInfo.type,
				factionAlignment: factionInfo.publicAlignment,
				secrets,
				role,
				rank,
				loyalty,
				justification,
				description,
			}),
		),
		associatedSites: associatedSites?.map(({ associationType, description, siteInfo }) => ({
			site: siteInfo.name,
			siteType: siteInfo.type,
			siteMood: siteInfo.mood,
			associationType,
			description,
		})),
		relationshipsWithOtherNpcs: relationshipsWithOtherNpcs?.map(
			({
				relationshipType,
				strength,
				history,
				narrativeTensions,
				sharedGoals,
				relationshipDynamics,
				isBidirectional,
				description,
				relatedNpcInfo,
			}) => ({
				relatedNpc: relatedNpcInfo.name,
				npcOccupation: relatedNpcInfo.occupation,
				npcAlignment: relatedNpcInfo.alignment,
				relationshipType,
				strength,
				bidirectional: isBidirectional,
				description,
				history,
				narrativeTensions,
				sharedGoals,
				relationshipDynamics,
			}),
		),
		conflictInvolvement: conflictInvolvement?.map(
			({ role, motivation, publicStance, secretStance, description, conflictInfo }) => ({
				conflict: conflictInfo.name,
				conflictScope: conflictInfo.scope,
				conflictStatus: conflictInfo.status,
				role,
				motivation,
				publicStance,
				secretStance,
				description,
			}),
		),
		questInvolvement: questInvolvement?.map(
			({ roleInQuest, importanceInQuest, involvementDetails, description, questInfo }) => ({
				quest: questInfo.name,
				questType: questInfo.type,
				questUrgency: questInfo.urgency,
				role: roleInQuest,
				importance: importanceInQuest,
				involvementDetails,
				description,
			}),
		),
		worldConceptConnections: worldConceptConnections?.map(
			({ linkRoleOrTypeText, linkStrength, linkDetailsText, description, conceptInfo }) => ({
				concept: conceptInfo.name,
				conceptType: conceptInfo.conceptType,
				conceptSummary: conceptInfo.summary,
				linkRole: linkRoleOrTypeText,
				linkStrength,
				linkDetails: linkDetailsText,
				description,
			}),
		),
		significantItems: significantItems?.map(({ relationshipType, relationshipDetails, description, itemInfo }) => ({
			item: itemInfo.name,
			itemType: itemInfo.itemType,
			itemRarity: itemInfo.rarity,
			itemSignificance: itemInfo.significance,
			relationshipType,
			relationshipDetails,
			description,
		})),
	})
}
