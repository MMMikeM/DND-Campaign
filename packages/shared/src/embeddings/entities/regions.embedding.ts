import { buildEmbedding } from "../embedding-helpers"
import type { AreaEmbeddingInput, RegionEmbeddingInput } from "../embedding-input-types"

export const embeddingTextForRegion = ({
	name,
	description,
	type,
	dangerLevel,
	atmosphereType,
	revelationLayersSummary,
	economy,
	history,
	population,
	culturalNotes,
	hazards,
	pointsOfInterest,
	rumors,
	secrets,
	containedAreas,
	outgoingConnections,
	worldConceptConnections,
	regionalFactionInfluence,
}: RegionEmbeddingInput): string => {
	return buildEmbedding({
		region: name,
		overview: description,
		type,
		dangerLevel,
		atmosphereType,
		economy,
		population,
		revelationLayersSummary,
		history,
		culturalNotes,
		hazards,
		pointsOfInterest,
		rumors,
		secrets,
		containedAreas: containedAreas?.map(({ name, type, dangerLevel, atmosphereType, description }) => ({
			area: name,
			areaType: type,
			dangerLevel,
			atmosphereType,
			description,
		})),
		outgoingConnections: outgoingConnections?.map(
			({
				connectionType,
				routeType,
				travelDifficulty,
				travelTime,
				travelHazards,
				pointsOfInterest,
				description,
				connectedToRegion,
				controllingFaction,
			}) => ({
				region: connectedToRegion.name,
				regionType: connectedToRegion.type,
				connectionType,
				routeType,
				travelDifficulty,
				travelTime,
				travelHazards,
				pointsOfInterest,
				description,
				controllingFaction: controllingFaction?.name,
				controllingFactionType: controllingFaction?.type,
			}),
		),
		regionalFactionInfluence: regionalFactionInfluence?.map(({ factionInfo, description }) => ({
			faction: factionInfo.name,
			factionType: factionInfo.type,
			description,
		})),

		worldConceptConnections: worldConceptConnections?.map(
			({ linkRoleOrTypeText, linkStrength, linkDetailsText, description, conceptInfo }) => ({
				concept: conceptInfo.name,
				conceptType: conceptInfo.conceptType,
				summary: conceptInfo.summary,
				linkRole: linkRoleOrTypeText,
				linkStrength,
				linkDetails: linkDetailsText,
				description,
			}),
		),
	})
}

export const embeddingTextForArea = ({
	name,
	description,
	type,
	dangerLevel,
	atmosphereType,
	leadership,
	population,
	primaryActivity,
	parentRegion,
	revelationLayersSummary,
	culturalNotes,
	hazards,
	pointsOfInterest,
	rumors,
	defenses,
	containedSites,
}: AreaEmbeddingInput): string => {
	return buildEmbedding({
		area: name,
		overview: description,
		type,
		dangerLevel,
		atmosphereType,
		leadership,
		population,
		primaryActivity,
		parentRegion: {
			region: parentRegion.name,
			regionType: parentRegion.type,
			dangerLevel: parentRegion.dangerLevel,
		},
		revelationLayersSummary,
		culturalNotes,
		hazards,
		pointsOfInterest,
		rumors,
		defenses,
		containedSites: containedSites?.map(({ name, intendedSiteFunction, mood, description, type }) => ({
			site: name,
			intendedSiteFunction,
			mood,
			description,
			type,
		})),
	})
}
