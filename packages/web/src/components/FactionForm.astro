---
interface Props {
	faction?: {
		id?: number;
		name: string;
		type: string;
		alignment?: string;
		description?: string;
		publicGoal?: string;
		trueGoal?: string;
		headquarters?: string;
		territory?: string;
		history?: string;
		notes?: string;
	};
	action: string;
	method?: 'POST' | 'PUT';
}

const { faction, action, method = 'POST' } = Astro.props;

const types = ['Political', 'Religious', 'Criminal', 'Military', 'Mercantile', 'Academic', 'Other'];
const alignments = [
	'Lawful Good', 'Lawful Neutral', 'Lawful Evil',
	'Neutral Good', 'True Neutral', 'Neutral Evil',
	'Chaotic Good', 'Chaotic Neutral', 'Chaotic Evil'
];
---

<form
	action={action}
	method={method === 'PUT' ? 'POST' : method}
	class="space-y-6"
	data-method={method}
>
	{faction?.id && <input type="hidden" name="id" value={faction.id} />}
	
	<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
		<div>
			<label for="name" class="block text-sm font-medium text-gray-700">Name</label>
			<input
				type="text"
				name="name"
				id="name"
				value={faction?.name ?? ''}
				required
				class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
			/>
			<p class="mt-1 text-sm text-red-600 hidden" id="name-error"></p>
		</div>
		
		<div>
			<label for="type" class="block text-sm font-medium text-gray-700">Type</label>
			<select
				name="type"
				id="type"
				required
				class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
			>
				<option value="">Select a type</option>
				{types.map((type) => (
					<option selected={faction?.type === type} value={type}>
						{type}
					</option>
				))}
			</select>
			<p class="mt-1 text-sm text-red-600 hidden" id="type-error"></p>
		</div>
		
		<div>
			<label for="alignment" class="block text-sm font-medium text-gray-700">Alignment (Optional)</label>
			<select
				name="alignment"
				id="alignment"
				class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
			>
				<option value="">Select an alignment</option>
				{alignments.map((alignment) => (
					<option selected={faction?.alignment === alignment} value={alignment}>
						{alignment}
					</option>
				))}
			</select>
		</div>
		
		<div>
			<label for="headquarters" class="block text-sm font-medium text-gray-700">Headquarters (Optional)</label>
			<input
				type="text"
				name="headquarters"
				id="headquarters"
				value={faction?.headquarters ?? ''}
				class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
			/>
		</div>
	</div>
	
	<div>
		<label for="description" class="block text-sm font-medium text-gray-700">Description</label>
		<textarea
			name="description"
			id="description"
			rows="3"
			class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
		>{faction?.description ?? ''}</textarea>
	</div>
	
	<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
		<div>
			<label for="publicGoal" class="block text-sm font-medium text-gray-700">Public Goal (Optional)</label>
			<textarea
				name="publicGoal"
				id="publicGoal"
				rows="3"
				class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
			>{faction?.publicGoal ?? ''}</textarea>
		</div>
		
		<div>
			<label for="trueGoal" class="block text-sm font-medium text-gray-700">True Goal (Optional)</label>
			<textarea
				name="trueGoal"
				id="trueGoal"
				rows="3"
				class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
			>{faction?.trueGoal ?? ''}</textarea>
		</div>
	</div>
	
	<div>
		<label for="territory" class="block text-sm font-medium text-gray-700">Territory (Optional)</label>
		<textarea
			name="territory"
			id="territory"
			rows="2"
			class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
		>{faction?.territory ?? ''}</textarea>
	</div>
	
	<div>
		<label for="history" class="block text-sm font-medium text-gray-700">History (Optional)</label>
		<textarea
			name="history"
			id="history"
			rows="4"
			class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
		>{faction?.history ?? ''}</textarea>
	</div>
	
	<div>
		<label for="notes" class="block text-sm font-medium text-gray-700">Notes (Optional)</label>
		<textarea
			name="notes"
			id="notes"
			rows="3"
			class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
		>{faction?.notes ?? ''}</textarea>
	</div>

	<div class="flex justify-end gap-4">
		<a
			href="/factions"
			class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
		>
			Cancel
		</a>
		<button
			type="submit"
			class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700"
		>
			{faction ? 'Update Faction' : 'Create Faction'}
		</button>
	</div>
</form>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const form = document.querySelector('form');
		if (!form) return;

		form.addEventListener('submit', async (e) => {
			e.preventDefault();

			// Clear previous errors
			document.querySelectorAll('[id$="-error"]').forEach((el) => {
				el.textContent = '';
				el.classList.add('hidden');
			});

			const formData = new FormData(form);
			const method = form.dataset.method || 'POST';

			try {
				const response = await fetch(form.action, {
					method,
					body: formData
				});

				if (!response.ok) {
					const data = await response.json();
					if (data.error === 'Validation Error' && data.details) {
						data.details.forEach((error: { path: string[]; message: string }) => {
							const field = error.path[0];
							const errorEl = document.getElementById(`${field}-error`);
							if (errorEl) {
								errorEl.textContent = error.message;
								errorEl.classList.remove('hidden');
							}
						});
					} else {
						throw new Error(data.error || 'Failed to save faction');
					}
				} else {
					window.location.href = '/factions';
				}
			} catch (error) {
				console.error('Error:', error);
				alert('An error occurred while saving the faction');
			}
		});
	});
</script> 