---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import Icon from "./Icon.astro";
import type { IconColor, IconName, IconSize } from "types/icon";

const button = cva(
  "inline-flex items-center justify-center rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors", 
  {
    variants: {
      intent: {
        primary: "bg-indigo-600 text-white hover:bg-indigo-700 border border-transparent focus:ring-indigo-500",
        secondary: "bg-white text-gray-700 hover:bg-gray-50 border border-gray-300 focus:ring-indigo-500",
        danger: "bg-red-600 text-white hover:bg-red-700 border border-transparent focus:ring-red-500",
        success: "bg-green-600 text-white hover:bg-green-700 border border-transparent focus:ring-green-500",
        ghost: "bg-transparent text-gray-700 hover:bg-gray-100 border border-transparent",
        link: "bg-transparent text-indigo-600 hover:text-indigo-700 border-none underline hover:underline focus:ring-0",
        outline: "bg-transparent text-indigo-600 hover:bg-indigo-50 border border-indigo-600 focus:ring-indigo-500",
      },
      size: {
        xs: "text-xs px-2 py-1",
        sm: "text-sm px-3 py-2 leading-4",
        md: "text-sm px-4 py-2",
        lg: "text-base px-6 py-3",
        xl: "text-lg px-8 py-4",
      },
      fullWidth: {
        true: "w-full",
        false: "",
      },
      iconPosition: {
        left: "flex-row",
        right: "flex-row-reverse",
      },
      disabled: {
        true: "opacity-50 cursor-not-allowed pointer-events-none",
        false: "cursor-pointer",
      },
      rounded: {
        default: "rounded-md",
        full: "rounded-full",
        none: "rounded-none",
      },
    },
    compoundVariants: [
      {
        intent: "link",
        size: ["xs", "sm", "md", "lg", "xl"],
        class: "px-0 py-0",
      },
      {
        iconPosition: "left",
        class: "space-x-2",
      },
      {
        iconPosition: "right",
        class: "space-x-reverse space-x-2",
      },
    ],
    defaultVariants: {
      intent: "primary",
      size: "md",
      fullWidth: false,
      iconPosition: "left",
      disabled: false,
      rounded: "default",
    },
  }
);

export interface Props extends Omit<HTMLAttributes<"button">, "disabled">, VariantProps<typeof button> {
  as?: "button" | "a";
  icon?: IconName;
  iconSize?: IconSize;
  iconColor?: IconColor;
  className?: string;
  href?: string;
  type?: "button" | "submit" | "reset";
  external?: boolean;
}

const {
  as = "button",
  icon,
  iconSize = "sm",
  iconColor,
  type = "button",
  class: className,
  intent = "primary",
  size = "md",
  fullWidth = false,
  iconPosition = "left",
  disabled = false,
  rounded = "default",
  href,
  external = false,
  ...rest
} = Astro.props;

// Determine if we should render a button or an anchor
const Element = as === "a" || href ? "a" : "button";

// If it's an anchor, add the href, target, and rel attributes
const elementProps = Element === "a" 
  ? { 
      href, 
      target: external ? "_blank" : undefined, 
      rel: external ? "noopener noreferrer" : undefined 
    } 
  : { 
      type, 
      disabled 
    };
---

<Element
  class={button({ intent, size, fullWidth, iconPosition, disabled, rounded, className })}
  {...elementProps}
  {...rest}
>
  {icon && <Icon name={icon} size={iconSize} color={iconColor} />}
  {Astro.slots.has('default') && <span><slot /></span>}
</Element>