---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import type { IconName } from "types/icon";
import Icon from "@components/Icon.astro";
import type { ColorTheme } from "types";

export interface Props extends HTMLAttributes<"div"> {
  colorTheme?: ColorTheme;
  title?: string;
  icon?: IconName;
  rightContent?: string;
  customHeaderClass?: string;
  customBodyClass?: string;
  customGradient?: string;
}

// Define the gradient card variants using CVA
const gradientCard = cva([
  "bg-white rounded-lg border shadow-md overflow-hidden",
  "transition-all duration-300 hover:shadow-lg",
  "dark:bg-gray-800 dark:shadow-gray-900/30",
]);

// Define the header variants using CVA
const cardHeader = cva(
  [
    "flex items-center justify-between p-4 border-b",
    "transition-colors duration-300",
  ],
  {
    variants: {
      colorTheme: {
        blue: [
          "border-blue-200 dark:border-blue-700/50",
          "bg-blue-50 dark:bg-blue-900/40",
          "hover:bg-blue-100 dark:hover:bg-blue-800/40",
        ].join(" "),
        green: [
          "border-green-200 dark:border-green-700/50",
          "bg-green-50 dark:bg-green-900/40",
          "hover:bg-green-100 dark:hover:bg-green-800/40",
        ].join(" "),
        purple: [
          "border-purple-200 dark:border-purple-700/50",
          "bg-purple-50 dark:bg-purple-900/40",
          "hover:bg-purple-100 dark:hover:bg-purple-800/40",
        ].join(" "),
        amber: [
          "border-amber-200 dark:border-amber-700/50",
          "bg-amber-50 dark:bg-amber-900/40",
          "hover:bg-amber-100 dark:hover:bg-amber-800/40",
        ].join(" "),
        red: [
          "border-red-200 dark:border-red-700/50",
          "bg-red-50 dark:bg-red-900/40",
          "hover:bg-red-100 dark:hover:bg-red-800/40",
        ].join(" "),
        gray: [
          "border-gray-200 dark:border-gray-600/50",
          "bg-gray-50 dark:bg-gray-900/40",
          "hover:bg-gray-100 dark:hover:bg-gray-800/40",
        ].join(" "),
        cyan: [
          "border-cyan-200 dark:border-cyan-700/50",
          "bg-cyan-50 dark:bg-cyan-900/40",
          "hover:bg-cyan-100 dark:hover:bg-cyan-800/40",
        ].join(" "),
        pink: [
          "border-pink-200 dark:border-pink-700/50",
          "bg-pink-50 dark:bg-pink-900/40",
          "hover:bg-pink-100 dark:hover:bg-pink-800/40",
        ].join(" "),
        indigo: [
          "border-indigo-200 dark:border-indigo-700/50",
          "bg-indigo-50 dark:bg-indigo-900/40",
          "hover:bg-indigo-100 dark:hover:bg-indigo-800/40",
        ].join(" "),
      },
    },
    defaultVariants: {
      colorTheme: "indigo",
    },
  },
);

// Define the title color variants
const titleColor = cva("text-xl font-semibold tracking-tight", {
  variants: {
    colorTheme: {
      blue: "text-blue-700 dark:text-blue-300",
      green: "text-green-700 dark:text-green-300",
      purple: "text-purple-700 dark:text-purple-300",
      amber: "text-amber-700 dark:text-amber-300",
      red: "text-red-700 dark:text-red-300",
      gray: "text-gray-700 dark:text-gray-300",
      cyan: "text-cyan-700 dark:text-cyan-300",
      pink: "text-pink-700 dark:text-pink-300",
      indigo: "text-indigo-700 dark:text-indigo-300",
    },
  },
  defaultVariants: {
    colorTheme: "indigo",
  },
});

// Define the icon color variants with hover animations
const iconColor = cva(
  [
    "mr-3 text-xl",
    "transition-all duration-300",
    "group-hover:scale-110 group-hover:rotate-3",
  ].join(" "),
  {
    variants: {
      colorTheme: {
        blue: "text-blue-600 dark:text-blue-400",
        green: "text-green-600 dark:text-green-400",
        purple: "text-purple-600 dark:text-purple-400",
        amber: "text-amber-600 dark:text-amber-400",
        red: "text-red-600 dark:text-red-400",
        gray: "text-gray-600 dark:text-gray-400",
        cyan: "text-cyan-600 dark:text-cyan-400",
        pink: "text-pink-600 dark:text-pink-400",
        indigo: "text-indigo-600 dark:text-indigo-400",
      },
    },
    defaultVariants: {
      colorTheme: "indigo",
    },
  },
);

const {
  colorTheme = "indigo",
  title,
  icon,
  rightContent,
  customHeaderClass,
  customBodyClass = "",
  customGradient,
} = Astro.props;

const headerClassName = customHeaderClass || cardHeader({ colorTheme });
const iconClassName = iconColor({ colorTheme });
const titleClassName = titleColor({ colorTheme });
---

<div
  class={`${gradientCard()} group hover:scale-[1.01] border-${colorTheme}-200 dark:border-${colorTheme}-700/50`}
>
  <div
    class={customGradient
      ? `flex items-center justify-between p-4 border-b ${customGradient}`
      : headerClassName}
  >
    <div class="flex items-center justify-between w-full">
      <div class="flex items-center">
        {
          icon && (
            <Icon
              name={icon}
              size="lg"
              class={iconClassName}
              color={colorTheme}
            />
          )
        }
        {title && <h2 class={titleClassName}>{title}</h2>}
      </div>
      <div class="flex items-center space-x-2">
        {
          rightContent && (
            <div
              class="text-gray-600 dark:text-gray-300"
              set:html={rightContent}
            />
          )
        }
        <slot name="header" />
      </div>
    </div>
  </div>

  <div
    class={`p-6 space-y-4 text-gray-700 dark:text-gray-200 ${customBodyClass}`}
  >
    <slot />
  </div>
</div>
