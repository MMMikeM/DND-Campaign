---
import type { HTMLAttributes } from 'astro/types';
import type { ColorTheme } from 'types';
import type { IconName } from 'types/icon';
import GradientCard from './GradientCard.astro';
import Icon from '@components/Icon.astro';

interface Props extends HTMLAttributes<'div'> {
  colorTheme?: ColorTheme;
  title?: string;
  icon?: IconName;
  rightContent?: string;
  customHeaderClass?: string;
  customBodyClass?: string;
  customGradient?: string;
  hasSecret?: boolean;
  isInitiallyBlurred?: boolean;
}

const { 
  isInitiallyBlurred = true, 
  colorTheme = "indigo", 
  ...props 
} = Astro.props;
---

<div x-data=`{ isBlurred: ${isInitiallyBlurred} }` class="relative">
  <GradientCard {...props}>
    <div slot="header" class="flex items-center justify-between w-full">
      <div class="flex-1">
        <slot name="header" />
      </div>
      <button 
        type="button" 
        @click="isBlurred = !isBlurred"
        class={`ml-2 text-${colorTheme}-600 hover:text-${colorTheme}-800 dark:text-${colorTheme}-400 dark:hover:text-${colorTheme}-300 transition-colors`}
        aria-label="Toggle visibility"
      >
        <span x-show="isBlurred">
          <Icon name="eye" size="md" />
        </span>
        <span x-show="!isBlurred">
          <Icon name="eye-off" size="md" />
        </span>
      </button>
    </div>
    
    <div 
      class="transition-all duration-300" 
      :class="isBlurred ? 'blur-md select-none' : ''"
    >
      <slot />
    </div>
    
    <div 
      class="absolute inset-0 flex items-center justify-center pointer-events-none" 
     
      x-show="isBlurred"
    >
      <span class="bg-white/70 px-3 py-1 rounded-full text-sm font-medium text-gray-700 dark:bg-gray-800/70 dark:text-gray-200">
        Click the eye to reveal
      </span>
    </div>
  </GradientCard>
</div>