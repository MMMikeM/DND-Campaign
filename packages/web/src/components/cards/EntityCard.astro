---
import type { Faction, Location, Npc, Quest } from '../../types/entities';
import Icon from '../Icon.astro';
import Chip from '../Chip.astro';

type EntityType = 'quest' | 'faction' | 'location' | 'npc';
type Entity = Quest | Faction | Location | Npc;
type IconName = Parameters<typeof Icon>[0]['name'];

// Define config types to avoid linter errors
interface EntityConfig {
  icon: IconName;
  tags: Array<{ value: string } | null>;
  mainContent?: string | string[] | undefined;
  subheader?: string;
  footer?: string;
  footerClass?: string;
}

interface Props {
  entity: Entity;
  entityType: EntityType;
}

const { entity, entityType } = Astro.props;

// Helper function to safely handle description arrays
const getMainContent = (obj: any, prop: string): string | string[] | undefined => {
  if (prop in obj && obj[prop]) {
    return Array.isArray(obj[prop]) ? obj[prop].join(' ') : obj[prop];
  }
  return undefined;
};

// Configure entity-specific properties
const config: Record<EntityType, EntityConfig> = {
  quest: {
    icon: "book",
    tags: [
      'type' in entity && entity.type ? { value: entity.type } : null,
      'difficulty' in entity && entity.difficulty ? { value: entity.difficulty } : null
    ],
    mainContent: getMainContent(entity, 'description'),
    footer: 'rewards' in entity && entity.rewards ? `Reward: ${entity.rewards}` : undefined,
    footerClass: "text-indigo-500 font-medium"
  },
  faction: {
    icon: "flag",
    tags: [],
    subheader: 'type' in entity && entity.type ? entity.type : undefined,
    mainContent: getMainContent(entity, 'description')
  },
  location: {
    icon: "map",
    tags: [
      'type' in entity && entity.type ? { value: entity.type } : null,
      'region' in entity && entity.region ? { value: entity.region } : null,
      'dangerLevel' in entity && entity.dangerLevel ? { value: `Danger: ${entity.dangerLevel}` } : null
    ],
    mainContent: getMainContent(entity, 'description')
  },
  npc: {
    icon: "user",
    tags: [
      'race' in entity && entity.race ? { value: entity.race } : null,
      'occupation' in entity && entity.occupation ? { value: entity.occupation } : null
    ],
    mainContent: getMainContent(entity, 'background'),
    footer: 'quirk' in entity && entity.quirk ? `"${entity.quirk}"` : undefined,
    footerClass: "text-indigo-500 italic"
  }
};

const currentConfig = config[entityType];
const tags = currentConfig.tags.filter((tag): tag is {value: string} => tag !== null);
---

<div id={`entity-${entityType}-${entity.id}`} class="bg-white overflow-hidden rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-300 group">
  <a href={`/${entityType}s/${entity.slug}`} class="block p-4">
    <div class="flex items-start space-x-4">
      <div class="flex-shrink-0">
        <Chip 
          color="indigo" 
          size="lg" 
          icon={{ name: currentConfig.icon}} 
          class="!rounded-md !bg-indigo-100 !p-2 shadow-sm !text-indigo-700 !mr-0"
        />
      </div>
      <div class="min-w-0 flex-1">
        <div class="flex justify-between items-start">
          <h3 class="text-xl font-semibold text-gray-900 group-hover:text-indigo-600 transition-colors duration-300">
            {entity.name}
          </h3>
          {tags.length > 0 && (
            <div class="flex flex-wrap gap-2">
              {tags.map((tag) => (
                <Chip color="indigo" size="sm">{tag.value}</Chip>
              ))}
            </div>
          )}
        </div>
        
        {currentConfig.subheader && (
          <p class="text-sm font-medium text-indigo-500 mt-1">
            {currentConfig.subheader}
          </p>
        )}
        
        {currentConfig.mainContent && (
          <p class="mt-2 text-sm text-gray-600 line-clamp-2 leading-relaxed">
            {currentConfig.mainContent}
          </p>
        )}

        {currentConfig.footer && (
          <p class={`mt-2 text-sm ${currentConfig.footerClass || ''}`}>
            {currentConfig.footer}
          </p>
        )}
      </div>
    </div>
  </a>
  <slot />
</div>