---
import type { ColorTheme } from "types";

export type BadgeType = 'influence' | 'relationship' | 'importance' | 'difficulty' | 'danger' | 'status' | 'generic';

interface Props {
  type: BadgeType;
  value: string;
  className?: string;
}

const { type, value, className = "" } = Astro.props;

// Skip rendering if no value
if (!value) return null;

// Helper to determine color based on type and value
const getColorClass = (type: BadgeType, value: string): ColorTheme => {
  const valueNormalized = value.toLowerCase();
  
  switch(type) {
    case 'influence':
      return valueNormalized === 'dominant' ? 'indigo' :
             valueNormalized === 'strong' ? 'blue' :
             valueNormalized === 'moderate' ? 'cyan' :
             valueNormalized === 'weak' ? 'gray' :
             'gray';
    
    case 'relationship':
      return valueNormalized === 'ally' ? 'green' :
             valueNormalized === 'enemy' ? 'red' :
             valueNormalized === 'friendly' ? 'green' :
             valueNormalized === 'hostile' ? 'amber' :
             'gray';
    
    case 'importance':
      return valueNormalized === 'critical' ? 'red' :
             valueNormalized === 'major' ? 'amber' :
             valueNormalized === 'supporting' ? 'blue' :
             valueNormalized === 'minor' ? 'gray' :
             'gray';
    
    case 'difficulty':
      return valueNormalized === 'very hard' ? 'red' :
             valueNormalized === 'hard' ? 'amber' :
             valueNormalized === 'medium' ? 'amber' :
             valueNormalized === 'easy' ? 'green' :
             'gray';
    
    case 'danger':
      return valueNormalized === 'deadly' ? 'red' :
             valueNormalized === 'high' ? 'amber' :
             valueNormalized === 'moderate' ? 'amber' :
             valueNormalized === 'low' ? 'blue' :
             valueNormalized === 'safe' ? 'green' :
             'gray';
    
    case 'status':
      return valueNormalized === 'leader' ? 'green' :
             valueNormalized === 'member' ? 'green' :
             valueNormalized === 'associate' ? 'cyan' :
             valueNormalized === 'former' ? 'gray' :
             'gray';
    
    default:
      return 'gray';
  }
};

const color = getColorClass(type, value);
---

<span class={`px-2 py-0.5 rounded-full text-xs bg-${color}-100 text-${color}-800 dark:bg-${color}-900 dark:text-${color}-200 ${className}`}>
  {value}
</span> 