---
import GradientCard from "@components/cards/GradientCard.astro";
import Icon from "@components/Icon.astro";
import type { IconName, IconColor } from "types/icon";
import type { ColorTheme } from "types";
import { hasItems } from "@utils/dataHelpers";

export interface RelatedEntity {
  id?: number | string;
  name?: string;
  
  // Support for different entity relation fields
  npcId?: number;
  locationId?: number;
  factionId?: number;
  questId?: number;
  otherLocationId?: number;
  otherFactionId?: number;
  relatedNpcId?: number;
  
  // Entity objects from database relations
  npc?: { name: string, id: number | string };
  location?: { name: string, id: number | string };
  faction?: { name: string, id: number | string };
  quest?: { name: string, id: number | string };
  otherLocation?: { name: string, id: number | string };
  relatedNpc?: { name: string, id: number | string };
  
  // Common relation descriptors
  role?: string;
  status?: string;
  influence?: string;
  type?: string;
  stage?: string | number;
  importance?: string;
  strength?: string;
  relationshipType?: string;
  
  // Text descriptions
  description?: string | string[];
  notes?: string | string[];
  context?: string | string[];
  interest?: string | string[];
  
  // Index signature for dynamic access
  [key: string]: any;
}

interface Props {
  title: string;
  items: RelatedEntity[];
  colorTheme?: ColorTheme;
  icon?: IconName;
  entityType: 'faction' | 'npc' | 'quest' | 'location';
  relationKey?: string;
  showRole?: boolean;
  showStatus?: boolean;
  showStrength?: boolean;
  showDescription?: boolean;
  showNotes?: boolean;
  emptyMessage?: string;
}

const { 
  title, 
  items = [], 
  colorTheme = "blue" as ColorTheme, 
  icon = "link" as IconName,
  entityType,
  relationKey,
  showRole = true,
  showStatus = false,
  showStrength = false,
  showDescription = true,
  showNotes = false,
  emptyMessage = "No items found"
} = Astro.props;

// Handle empty items array
if (!hasItems(items)) {
  return;
}

// Determine what ID field to use for links
const getEntityId = (item: RelatedEntity): string | number => {
  // Direct ID
  if (item.id) return item.id;
  
  // Matching entity type IDs
  if (entityType === 'npc' && item.npcId) return item.npcId;
  if (entityType === 'location' && item.locationId) return item.locationId;
  if (entityType === 'faction' && item.factionId) return item.factionId;
  if (entityType === 'quest' && item.questId) return item.questId;
  
  // Related entity IDs
  if (entityType === 'npc' && item.relatedNpcId) return item.relatedNpcId;
  if (entityType === 'location' && item.otherLocationId) return item.otherLocationId;
  if (entityType === 'faction' && item.otherFactionId) return item.otherFactionId;
  
  // Fallback
  if (relationKey && item[relationKey]) return item[relationKey];
  
  return 0;
};

// Get entity name 
const getEntityName = (item: RelatedEntity): string => {
  // Direct name
  if (item.name) return item.name;
  
  // Entity object name
  if (entityType === 'npc' && item.npc?.name) return item.npc.name;
  if (entityType === 'location' && item.location?.name) return item.location.name;
  if (entityType === 'faction' && item.faction?.name) return item.faction.name;
  if (entityType === 'quest' && item.quest?.name) return item.quest.name;
  
  // Related entity names
  if (entityType === 'npc' && item.relatedNpc?.name) return item.relatedNpc.name;
  if (entityType === 'location' && item.otherLocation?.name) return item.otherLocation.name;
  if (entityType === 'faction' && item.faction?.name) return item.faction.name;
  
  return `Unknown ${entityType}`;
};

// Helper function to process text arrays or strings
const formatText = (text: string | string[] | undefined): string => {
  if (!text) return '';
  return Array.isArray(text) ? text.join('\n') : text;
};
---

<GradientCard
  colorTheme={colorTheme}
  title={title}
  icon={icon}
>
  {items.length > 0 ? (
    <ul class="space-y-4">
      {items.map((item) => (
        <li class="flex items-start">
          <Icon name={icon} size="sm" color={colorTheme} class="mr-2 mt-1 flex-shrink-0" />
          <div>
            <a href={`/${entityType}s/${getEntityId(item)}`} class={`font-medium hover:text-${colorTheme}-600 transition-colors`}>
              {getEntityName(item)}
            </a>
            
            {/* Role */}
            {showRole && item.role && (
              <div class="text-sm text-gray-600 dark:text-gray-400">
                <span class="font-medium">Role:</span> {item.role}
              </div>
            )}
            
            {/* Status */}
            {showStatus && item.status && (
              <div class="text-sm text-gray-600 dark:text-gray-400">
                <span class="font-medium">Status:</span> {item.status}
              </div>
            )}
            
            {/* Strength */}
            {showStrength && item.strength && (
              <div class="text-sm text-gray-600 dark:text-gray-400">
                <span class="font-medium">Relationship:</span> {item.strength}
              </div>
            )}
            
            {/* Influence */}
            {item.influence && (
              <div class="text-sm text-gray-600 dark:text-gray-400">
                <span class="font-medium">Influence:</span> {item.influence}
              </div>
            )}
            
            {/* Stage */}
            {item.stage && (
              <div class="text-sm text-gray-600 dark:text-gray-400">
                <span class="font-medium">Stage:</span> {item.stage}
              </div>
            )}
            
            {/* Description */}
            {showDescription && (item.description || item.context) && (
              <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                {formatText(item.description) || formatText(item.context)}
              </p>
            )}
            
            {/* Notes */}
            {showNotes && item.notes && (
              <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                {formatText(item.notes)}
              </p>
            )}
            
            {/* Interest */}
            {item.interest && (
              <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                <span class="font-medium">Interest:</span> {formatText(item.interest)}
              </p>
            )}
          </div>
        </li>
      ))}
    </ul>
  ) : (
    <p class="text-gray-500">{emptyMessage}</p>
  )}
</GradientCard> 