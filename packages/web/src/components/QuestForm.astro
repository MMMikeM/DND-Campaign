---
interface Props {
	quest?: {
		id?: number;
		title: string;
		description: string;
		type: string;
		difficulty: string;
		adaptable?: boolean;
	};
	action: string;
	method?: 'POST' | 'PUT';
}

const { quest, action, method = 'POST' } = Astro.props;

const types = ['Combat', 'Exploration', 'Social', 'Investigation', 'Mystery', 'Other'];
const difficulties = ['Easy', 'Medium', 'Hard', 'Very Hard', 'Legendary'];
---

<form
	action={action}
	method={method === 'PUT' ? 'POST' : method}
	class="space-y-6"
	data-method={method}
>
	{quest?.id && <input type="hidden" name="id" value={quest.id} />}
	
	<div>
		<label for="title" class="block text-sm font-medium text-gray-700">Title</label>
		<input
			type="text"
			name="title"
			id="title"
			value={quest?.title ?? ''}
			required
			class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
		/>
		<p class="mt-1 text-sm text-red-600 hidden" id="title-error"></p>
	</div>

	<div>
		<label for="description" class="block text-sm font-medium text-gray-700">Description</label>
		<textarea
			name="description"
			id="description"
			rows="4"
			required
			class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
		>{quest?.description ?? ''}</textarea>
		<p class="mt-1 text-sm text-red-600 hidden" id="description-error"></p>
	</div>

	<div>
		<label for="type" class="block text-sm font-medium text-gray-700">Type</label>
		<select
			name="type"
			id="type"
			required
			class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
		>
			{types.map((type) => (
				<option selected={quest?.type === type} value={type}>
					{type}
				</option>
			))}
		</select>
		<p class="mt-1 text-sm text-red-600 hidden" id="type-error"></p>
	</div>

	<div>
		<label for="difficulty" class="block text-sm font-medium text-gray-700">Difficulty</label>
		<select
			name="difficulty"
			id="difficulty"
			required
			class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
		>
			{difficulties.map((difficulty) => (
				<option selected={quest?.difficulty === difficulty} value={difficulty}>
					{difficulty}
				</option>
			))}
		</select>
		<p class="mt-1 text-sm text-red-600 hidden" id="difficulty-error"></p>
	</div>

	<div class="flex items-center gap-2">
		<input
			type="checkbox"
			name="adaptable"
			id="adaptable"
			checked={quest?.adaptable ?? true}
			class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
		/>
		<label for="adaptable" class="text-sm font-medium text-gray-700">
			Adaptable (can be modified during play)
		</label>
	</div>

	<div class="flex justify-end gap-4">
		<a
			href="/quests"
			class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
		>
			Cancel
		</a>
		<button
			type="submit"
			class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700"
		>
			{quest ? 'Update Quest' : 'Create Quest'}
		</button>
	</div>
</form>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const form = document.querySelector('form');
		if (!form) return;

		form.addEventListener('submit', async (e) => {
			e.preventDefault();

			// Clear previous errors
			document.querySelectorAll('[id$="-error"]').forEach((el) => {
				el.textContent = '';
				el.classList.add('hidden');
			});

			const formData = new FormData(form);
			const method = form.dataset.method || 'POST';

			try {
				const response = await fetch(form.action, {
					method,
					body: formData
				});

				if (!response.ok) {
					const data = await response.json();
					if (data.error === 'Validation Error' && data.details) {
						data.details.forEach((error: { path: string[]; message: string }) => {
							const field = error.path[0];
							const errorEl = document.getElementById(`${field}-error`);
							if (errorEl) {
								errorEl.textContent = error.message;
								errorEl.classList.remove('hidden');
							}
						});
					} else {
						throw new Error(data.error || 'Failed to save quest');
					}
				} else {
					window.location.href = '/quests';
				}
			} catch (error) {
				console.error('Error:', error);
				alert('An error occurred while saving the quest');
			}
		});
	});
</script> 