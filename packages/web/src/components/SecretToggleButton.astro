---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import Icon from "./Icon.astro";

// Define the button variants using CVA
const secretButton = cva(
  "px-2 py-1 text-sm font-medium rounded-full transition-colors cursor-pointer flex items-center", 
  {
    variants: {
      showSecret: {
        true: "bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 hover:bg-green-200 dark:hover:bg-green-700",
        false: "bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-200 hover:bg-red-200 dark:hover:bg-red-700",
      },
    },
    defaultVariants: {
      showSecret: false,
    }
  }
);

// Define the props interface
export interface Props extends HTMLAttributes<"button">, VariantProps<typeof secretButton> {
  showSecret: boolean;
  className?: string;
}

// Destructure the props with defaults
const { 
  showSecret,
  className = "",
} = Astro.props;
---

<button
  type="button"
  class={secretButton({ showSecret, className })}
  aria-label={showSecret ? "Hide secret content" : "Show secret content"}
  data-state={showSecret ? "visible" : "hidden"}
  data-secret-toggle
>
  <span>DM Only</span>
  <span class="ml-1">
    {showSecret ? 
      <Icon name="eye-off" size="sm" /> : 
      <Icon name="eye" size="sm" />
    }
  </span>
</button>

<script define:vars={{ secretButtonFunction: secretButton.toString() }}>
  // Client-side JavaScript to handle the toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    // Recreate the secretButton function from the stringified version
    const secretButton = new Function(`return ${secretButtonFunction}`)();
    
    const toggleButtons = document.querySelectorAll('[data-secret-toggle]');
    
    toggleButtons.forEach(button => {
      button.addEventListener('click', () => {
        const currentState = button.getAttribute('data-state');
        const newState = currentState === 'visible' ? 'hidden' : 'visible';
        const showSecret = newState === 'visible';
        
        // Toggle the state attribute
        button.setAttribute('data-state', newState);
        
        // Update aria-label
        button.setAttribute('aria-label', showSecret ? 'Hide secret content' : 'Show secret content');
        
        // Use CVA logic by applying the appropriate classes
        const buttonClasses = secretButton({ showSecret });
        
        // Reset the class attribute to use only CVA-generated classes plus any original custom class
        const customClass = button.getAttribute('data-custom-class') || '';
        button.className = `${buttonClasses} ${customClass}`.trim();
        
        // Update the icon
        const iconSpan = button.querySelector('span.ml-1');
        if (iconSpan) {
          iconSpan.innerHTML = showSecret
            ? '<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>' 
            : '<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>';
        }
        
        // Dispatch a custom event that other components can listen for
        const event = new CustomEvent('secretToggled', { 
          detail: { state: showSecret },
          bubbles: true 
        });
        button.dispatchEvent(event);
      });
    });
    
    // Store any custom classes to preserve them during state changes
    toggleButtons.forEach(button => {
      const classes = button.className.split(' ');
      const cvaClasses = secretButton({ showSecret: button.getAttribute('data-state') === 'visible' }).split(' ');
      
      // Find classes that aren't part of the CVA output
      const customClasses = classes.filter(cls => !cvaClasses.includes(cls));
      
      if (customClasses.length > 0) {
        button.setAttribute('data-custom-class', customClasses.join(' '));
      }
    });
  });
</script>