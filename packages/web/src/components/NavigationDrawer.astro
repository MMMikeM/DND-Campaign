---
import { cva } from 'class-variance-authority';
import Icon from './Icon.astro';
import { getEntityNamesAndIds } from '@entities';

// Get route parameters directly from Astro.params
const { category: currentCategory, id: currentId } = Astro.params;

// Define categories for the navigation (use lowercase to match URL patterns)
const categories = ['npcs', 'factions', 'locations', 'quests'] as const;

// Fetch data using the server actions
const data = await Promise.all(categories.map(async category => ({
  category,
  data: await getEntityNamesAndIds(category),
})));

const dataByCategory = data.reduce((acc, { category, data }) => {
  acc[category] = data;
  return acc;
}, {} as Record<string, { id: number; name: string }[]>);

// Get icon for category
const getIconForCategory = (category: string) => {
  switch (category.toLowerCase()) {
    case 'factions': return 'users';
    case 'npcs': return 'user';
    case 'locations': return 'map';
    case 'quests': return 'book';
    default: return 'file-text';
  }
};

// Define CSS variants
const navLink = cva('w-full py-2 px-3 text-left text-sm rounded-md transition-colors flex items-center', {
  variants: {
    isActive: {
      true: 'bg-indigo-900 text-white',
      false: 'hover:bg-gray-800 text-gray-300',
    },
  },
  defaultVariants: {
    isActive: false,
  }
});

// Format category name for display
const formatCategoryName = (category: string) => {
  return category.charAt(0).toUpperCase() + category.slice(1);
};
---

<div class="flex h-screen overflow-hidden">
  <!-- Navigation Drawer -->
  <div class="flex-shrink-0 relative h-full">
    <!-- Mobile toggle button - shown only on small screens -->
    <button
      type="button"
      id="toggleDrawerBtn"
      class="md:hidden fixed top-4 left-4 z-50 p-2 bg-indigo-700 rounded-md shadow-lg"
      aria-label="Toggle navigation"
    >
      <span id="toggleDrawerIcon">
        <Icon name="menu" color="white" />
      </span>
    </button>

    <!-- Drawer -->
    <div
      id="navigationDrawer"
      class="fixed top-0 left-0 h-full z-40 transform transition-transform duration-300 ease-in-out -translate-x-full md:translate-x-0 md:relative md:transform-none bg-gray-900 text-white w-64 md:w-72 overflow-y-auto border-r border-gray-800"
    >
      <div class="sticky top-0 bg-indigo-800 p-4 border-b border-indigo-700 flex justify-between items-center shadow-md">
        <div class="flex items-center space-x-2">
          <Icon name="dices" color="white" />
          <h2 class="text-xl font-bold text-white">Tome Keeper</h2>
        </div>
        <button
          type="button"
          id="closeDrawerBtn"
          class="md:hidden p-1 rounded-md hover:bg-indigo-700 transition-colors"
          aria-label="Close navigation"
        >
          <Icon name="x" color="white" />
        </button>
      </div>

      <!-- Home Link -->
      <a href="/" class={navLink({ isActive: Astro.url.pathname === '/' })}>
        <Icon name="book" class="mr-2" />
        <span>Home</span>
      </a>

      <!-- Search Box -->
      <div class="p-3">
        <div class="relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <Icon name="search" color="gray" size="sm" />
          </div>
          <input
            type="text"
            class="bg-gray-800 block w-full pl-10 pr-3 py-2 rounded-md text-sm text-gray-300 placeholder-gray-500 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Search..."
          />
        </div>
      </div>

      <div class="p-2">
        {categories.map((category) => (
          <div class="mb-4">
            <div class="px-3 py-2 flex items-center justify-between">
              <button
                type="button"
                class="flex items-center justify-between text-left rounded-md hover:bg-gray-800 transition-colors category-toggle p-2 w-full"
                data-category={category}
                data-expanded={currentCategory === category ? 'true' : 'false'}
              >
                <div class="flex items-center space-x-2">
                  <Icon name={getIconForCategory(category)} color="indigo" />
                  <span class="font-medium">{formatCategoryName(category)}</span>
                  <span class="text-xs bg-indigo-900 text-indigo-100 px-2 py-0.5 rounded-full">
                    {dataByCategory[category]?.length || 0}
                  </span>
                </div>
                <span class="chevron-icon">
                  <Icon name={currentCategory === category ? "chevron-down" : "chevron-right"} size="sm" />
                </span>
              </button>

              <a 
                href={`/${category}/new`} 
                class="p-2 text-gray-400 hover:text-white hover:bg-indigo-700 rounded-md transition-colors"
                title={`New ${formatCategoryName(category).slice(0, -1)}`}
              >
                <Icon name="plus" size="sm" />
              </a>
            </div>

            <!-- Category content -->
            <div 
              class="mt-1 ml-4 space-y-1 category-content overflow-hidden transition-all duration-300"
              style={currentCategory === category ? 'max-height: 1000px; opacity: 1;' : 'max-height: 0; opacity: 0;'}
              data-category={category}
            >
              {dataByCategory[category]?.length > 0 ? (
                <div class="pl-4 border-l-2 border-gray-800">
                  {dataByCategory[category].map(item => (
                    <a
                      href={`/${category}/${item.id}`}
                      class={navLink({ isActive: currentId === String(item.id) })}
                    >
                      <span class="truncate">{item.name}</span>
                    </a>
                  ))}
                </div>
              ) : (
                <div class="text-sm text-gray-400 py-2 px-3 pl-4 border-l-2 border-gray-800">
                  No {category} found
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      <!-- Footer -->
      <div class="absolute bottom-0 left-0 right-0 p-4 bg-gray-900 border-t border-gray-800">
        <div class="flex justify-between items-center text-sm text-gray-400">
          <span>Â© 2025 Tome Keeper</span>
          <a href="#" class="hover:text-indigo-400 transition-colors">Help</a>
        </div>
      </div>
    </div>

    <!-- Overlay for mobile - closes drawer when clicking outside -->
    <div
      id="drawerOverlay"
      class="md:hidden fixed inset-0 bg-black bg-opacity-50 z-30 hidden"
      role="button"
      aria-label="Close navigation"
    ></div>
  </div>

  <!-- Main Content -->
  <div class="flex-grow overflow-y-auto">
    <slot />
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Toggle drawer functionality
    const toggleDrawerBtn = document.getElementById('toggleDrawerBtn');
    const closeDrawerBtn = document.getElementById('closeDrawerBtn');
    const navigationDrawer = document.getElementById('navigationDrawer');
    const drawerOverlay = document.getElementById('drawerOverlay');
    const toggleDrawerIcon = document.getElementById('toggleDrawerIcon');

    let isOpen = false;

    function toggleDrawer() {
      isOpen = !isOpen;
      
      if (isOpen) {
        navigationDrawer?.classList.remove('-translate-x-full');
        navigationDrawer?.classList.add('translate-x-0');
        drawerOverlay?.classList.remove('hidden');
        if (toggleDrawerIcon) {
          toggleDrawerIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>`;
        }
      } else {
        navigationDrawer?.classList.add('-translate-x-full');
        navigationDrawer?.classList.remove('translate-x-0');
        drawerOverlay?.classList.add('hidden');
        if (toggleDrawerIcon) {
          toggleDrawerIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>`;
        }
      }
    }

    toggleDrawerBtn?.addEventListener('click', toggleDrawer);
    closeDrawerBtn?.addEventListener('click', toggleDrawer);
    drawerOverlay?.addEventListener('click', toggleDrawer);
    
    // Category toggle functionality
    const categoryToggles = document.querySelectorAll('.category-toggle');
    
    categoryToggles.forEach(toggle => {
      toggle.addEventListener('click', (e) => {
        const button = e.currentTarget as HTMLElement;
        const categoryName = button.getAttribute('data-category');
        const isExpanded = button.getAttribute('data-expanded') === 'true';
        const newExpandedState = !isExpanded;
        
        button.setAttribute('data-expanded', newExpandedState ? 'true' : 'false');
        const chevronIcon = button.querySelector('.chevron-icon');
        
        if (chevronIcon) {
          chevronIcon.innerHTML = newExpandedState 
            ? `<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>`
            : `<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>`;
        }
        
        // Find and toggle the related content
        if (categoryName) {
          const contentElement = document.querySelector(`.category-content[data-category="${categoryName}"]`);
          if (contentElement) {
            contentElement.setAttribute('style', newExpandedState 
              ? 'max-height: 1000px; opacity: 1;'
              : 'max-height: 0; opacity: 0;');
          }
        }
      });
    });
  });
</script>

<style>
  /* Smooth transitions for the category content */
  .category-content {
    transition: max-height 0.3s ease-in-out, opacity 0.3s ease-in-out;
  }
  
  /* Fix scrolling issues */
  #navigationDrawer {
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.1) transparent;
  }
  
  #navigationDrawer::-webkit-scrollbar {
    width: 4px;
  }
  
  #navigationDrawer::-webkit-scrollbar-track {
    background: transparent;
  }
  
  #navigationDrawer::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 20px;
  }
</style>