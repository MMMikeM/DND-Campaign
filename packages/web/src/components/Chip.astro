---
import { cva, type VariantProps } from "class-variance-authority";
import type { ColorTheme } from "types";
import Icon, { type Props as IconProps } from "./Icon.astro";
import type { IconSize } from "types/icon";

// Define the chip variants using CVA with array syntax for better composition
const chip = cva(
  [
    "inline-flex",
    "items-center",
    "justify-center",
    "rounded-full",
    "font-medium",
    "capitalize",
  ],
  {
    variants: {
      color: {
        blue: [
          "bg-blue-100/80",
          "dark:bg-blue-900/40",
          "text-blue-700",
          "dark:text-blue-300",
          "border-blue-200/50",
          "dark:border-blue-800/50",
        ],
        green: [
          "bg-green-100/80",
          "dark:bg-green-900/40",
          "text-green-700",
          "dark:text-green-300",
          "border-green-200/50",
          "dark:border-green-800/50",
        ],
        purple: [
          "bg-purple-100/80",
          "dark:bg-purple-900/40",
          "text-purple-700",
          "dark:text-purple-300",
          "border-purple-200/50",
          "dark:border-purple-800/50",
        ],
        amber: [
          "bg-amber-100/80",
          "dark:bg-amber-900/40",
          "text-amber-700",
          "dark:text-amber-300",
          "border-amber-200/50",
          "dark:border-amber-800/50",
        ],
        red: [
          "bg-red-100/80",
          "dark:bg-red-900/40",
          "text-red-700",
          "dark:text-red-300",
          "border-red-200/50",
          "dark:border-red-800/50",
        ],
        gray: [
          "bg-gray-100/80",
          "dark:bg-gray-800/40",
          "text-gray-700",
          "dark:text-gray-300",
          "border-gray-200/50",
          "dark:border-gray-700/50",
        ],
        cyan: [
          "bg-cyan-100/80",
          "dark:bg-cyan-900/40",
          "text-cyan-700",
          "dark:text-cyan-300",
          "border-cyan-200/50",
          "dark:border-cyan-800/50",
        ],
        pink: [
          "bg-pink-100/80",
          "dark:bg-pink-900/40",
          "text-pink-700",
          "dark:text-pink-300",
          "border-pink-200/50",
          "dark:border-pink-800/50",
        ],
        indigo: [
          "bg-indigo-100/80",
          "dark:bg-indigo-900/40",
          "text-indigo-700",
          "dark:text-indigo-300",
          "border-indigo-200/50",
          "dark:border-indigo-800/50",
        ],
        yellow: [
          "bg-yellow-100/80",
          "dark:bg-yellow-900/40",
          "text-yellow-700",
          "dark:text-yellow-300",
          "border-yellow-200/50",
          "dark:border-yellow-800/50",
        ],
        teal: [
          "bg-teal-100/80",
          "dark:bg-teal-900/40",
          "text-teal-700",
          "dark:text-teal-300",
          "border-teal-200/50",
          "dark:border-teal-800/50",
        ],
      },
      size: {
        xs: ["text-xs", "gap-1"],
        sm: ["text-sm", "gap-1.5"],
        md: ["text-base", "gap-2"],
        lg: ["text-lg", "gap-2.5"],
        xl: ["text-xl", "gap-3"],
      },
      withBorder: {
        true: ["border"],
        false: [],
      },
      hasIconOnly: {
        true: ["p-1", "aspect-square", "justify-center"],
        false: [],
      },
      padding: {
        sm: ["px-2", "py-0.5"],
        md: ["px-3", "py-1"],
        lg: ["px-4", "py-1.5"],
      },
    },
    compoundVariants: [
      {
        hasIconOnly: false,
        size: "sm",
        class: "px-2 py-0.5",
      },
      {
        hasIconOnly: false,
        size: "md",
        class: "px-3 py-1",
      },
      {
        hasIconOnly: false,
        size: "lg",
        class: "px-4 py-1.5",
      },
    ],
    defaultVariants: {
      color: "gray",
      size: "md",
      withBorder: false,
      hasIconOnly: false,
    },
  },
);

// Properly type the component props
type ChipVariantProps = VariantProps<typeof chip>;

// Props interface for Chip component
export interface Props
  extends Omit<ChipVariantProps, "hasIconOnly" | "padding"> {
  color: ColorTheme;
  class?: string;
  icon?: IconProps;
  iconPosition?: "left" | "right";
  show?: boolean;
}

// Destructure props with defaults
const {
  color,
  size = "md",
  withBorder = false,
  icon,
  iconPosition = "left",
  class: className,
  ...restProps
} = Astro.props;

// Determine if the chip is icon-only
const hasText = Astro.slots.has("default");
const hasIconOnly = !!icon && !hasText;

// Compute chip classes
const chipClasses = chip({
  color,
  size,
  withBorder,
  hasIconOnly,
  class: className,
});

const iconSizeMap = {
  xs: "xs",
  sm: "xs",
  md: "sm",
  lg: "md",
  xl: "lg",
} satisfies Record<NonNullable<Props["size"]>, IconSize>;

// Apply spacing only when there's text
---

<span class={chipClasses} {...restProps}>
  {
    icon && iconPosition === "left" && (
      <Icon
        {...icon}
        class={"!m-O" + icon.class || ""}
        size={iconSizeMap[size ?? "md"]}
      />
    )
  }

  <slot />

  {
    icon && iconPosition === "right" && (
      <Icon
        {...icon}
        class={"!m-O" + icon.class || ""}
        size={iconSizeMap[size ?? "md"]}
      />
    )
  }
</span>
