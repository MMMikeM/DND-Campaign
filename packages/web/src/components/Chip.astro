---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";

// Define color types
export type ChipColor =
  | "blue"
  | "green"
  | "purple"
  | "amber"
  | "red"
  | "gray"
  | "cyan"
  | "pink"
  | "indigo";

// Define size types
export type ChipSize = "sm" | "md" | "lg";

// Define the chip variants using CVA
const chip = cva("inline-flex items-center rounded-full font-medium", {
  variants: {
    color: {
      blue: "bg-blue-100/80 dark:bg-blue-900/40 text-blue-700 dark:text-blue-300 border-blue-200/50 dark:border-blue-800/50",
      green: "bg-green-100/80 dark:bg-green-900/40 text-green-700 dark:text-green-300 border-green-200/50 dark:border-green-800/50",
      purple: "bg-purple-100/80 dark:bg-purple-900/40 text-purple-700 dark:text-purple-300 border-purple-200/50 dark:border-purple-800/50",
      amber: "bg-amber-100/80 dark:bg-amber-900/40 text-amber-700 dark:text-amber-300 border-amber-200/50 dark:border-amber-800/50",
      red: "bg-red-100/80 dark:bg-red-900/40 text-red-700 dark:text-red-300 border-red-200/50 dark:border-red-800/50",
      gray: "bg-gray-100/80 dark:bg-gray-800/40 text-gray-700 dark:text-gray-300 border-gray-200/50 dark:border-gray-700/50",
      cyan: "bg-cyan-100/80 dark:bg-cyan-900/40 text-cyan-700 dark:text-cyan-300 border-cyan-200/50 dark:border-cyan-800/50",
      pink: "bg-pink-100/80 dark:bg-pink-900/40 text-pink-700 dark:text-pink-300 border-pink-200/50 dark:border-pink-800/50",
      indigo: "bg-indigo-100/80 dark:bg-indigo-900/40 text-indigo-700 dark:text-indigo-300 border-indigo-200/50 dark:border-indigo-800/50",
    },
    size: {
      sm: "text-xs px-2 py-0.5",
      md: "text-sm px-3 py-1",
      lg: "text-base px-4 py-1.5",
    },
    withBorder: {
      true: "border",
      false: "",
    },
    withBlur: {
      true: "backdrop-blur-sm",
      false: "",
    },
    isInteractive: {
      true: "cursor-pointer hover:opacity-80 transition-opacity",
      false: "",
    },
  },
  defaultVariants: {
    color: "gray",
    size: "md",
    withBorder: false,
    withBlur: true,
    isInteractive: false,
  },
});

// Icons size classes
const iconSize = {
  sm: "w-3.5 h-3.5",
  md: "w-4 h-4",
  lg: "w-5 h-5",
};

// Props interface
export interface Props extends HTMLAttributes<"span">, VariantProps<typeof chip> {
  icon?: string;
  isInteractive?: boolean;
}

// Destructure props with defaults
const {
  color = "gray",
  size = "md",
  withBorder = false,
  withBlur = true,
  isInteractive = false,
  icon,
  class: className = "",
} = Astro.props;
---

<span
  class={chip({ color, size, withBorder, withBlur, isInteractive, className })}
  role={isInteractive ? "button" : undefined}
  tabindex={isInteractive ? 0 : undefined}
  data-interactive={isInteractive ? true : undefined}
>
  {icon && <span class={`mr-1 ${iconSize[size]}`} set:html={icon} />}
  <slot />
</span>

<script>
  // Client-side JavaScript for interactive chips
  document.addEventListener('DOMContentLoaded', () => {
    const interactiveChips = document.querySelectorAll('[data-interactive="true"]');
    
    interactiveChips.forEach(chip => {
      chip.addEventListener('click', () => {
        // Dispatch a custom event that can be listened for
        const event = new CustomEvent('chipClicked', {
          detail: { chip },
          bubbles: true
        });
        chip.dispatchEvent(event);
      });
      
      chip.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          // Trigger the same event as click
          const event = new CustomEvent('chipClicked', {
            detail: { chip },
            bubbles: true
          });
          chip.dispatchEvent(event);
        }
      });
    });
  });
</script>