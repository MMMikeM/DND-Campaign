---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import type { NPC } from "../types/models";
import Chip from "./Chip.astro";

// Props interface
interface Props {
  npc: NPC;
}

const { npc } = Astro.props;

// Tab button styles using CVA
const tabButton = cva("whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm", {
  variants: {
    active: {
      true: "border-blue-500 text-blue-400",
      false: "border-transparent text-slate-400 hover:text-slate-300 hover:border-slate-300"
    }
  },
  defaultVariants: {
    active: false
  }
});

// Icons for tabs
const icons = {
  description: `<span class="mr-2">üìù</span>`,
  personality: `<span class="mr-2">üòÄ</span>`,
  inventory: `<span class="mr-2">üéí</span>`,
  dialogue: `<span class="mr-2">üí¨</span>`,
};

// Icons for chips
const chipIcons = {
  race: `<span class="mr-1">üë§</span>`,
  gender: `<span class="mr-1">‚ôÇÔ∏è/‚ôÄÔ∏è</span>`,
  occupation: `<span class="mr-1">üõ†Ô∏è</span>`,
  role: `<span class="mr-1">üé≠</span>`,
};
---

<div class="bg-slate-800 rounded-xl shadow-xl overflow-hidden border border-slate-700">
  <!-- Header -->
  <div class="bg-slate-700 p-6">
    <div class="flex justify-between items-center">
      <h2 class="text-3xl font-bold text-white">{npc.name}</h2>
      <div class="flex gap-2">
        <button
          type="button"
          class="p-2 text-slate-400 hover:text-white hover:bg-slate-600 rounded-md"
          aria-label="Edit NPC"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
            />
          </svg>
        </button>
        <button
          type="button"
          class="p-2 text-slate-400 hover:text-white hover:bg-slate-600 rounded-md"
          aria-label="Delete NPC"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
            />
          </svg>
        </button>
      </div>
    </div>
    <div class="mt-3 flex gap-3">
      <div class="text-slate-300 flex items-center">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 mr-1 text-blue-400"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
          />
        </svg>
        {npc.role || npc.occupation}
      </div>
      <div class="text-slate-300 flex items-center">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 mr-1 text-purple-400"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
          />
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
          />
        </svg>
        Traveling merchant, often found in marketplaces
      </div>
    </div>
  </div>

  <!-- Tabs -->
  <div class="bg-slate-900 px-6 border-b border-slate-700">
    <nav class="-mb-px flex space-x-8" aria-label="Tabs">
      <button
        type="button"
        class={tabButton({ active: true })}
        data-tab="description"
        aria-label="Show Description tab"
      >
        <span class="flex items-center" set:html={icons.description} /> Description
      </button>
      <button
        type="button"
        class={tabButton({ active: false })}
        data-tab="personality"
        aria-label="Show Personality tab"
      >
        <span class="flex items-center" set:html={icons.personality} /> Personality
      </button>
      <button
        type="button"
        class={tabButton({ active: false })}
        data-tab="inventory"
        aria-label="Show Inventory tab"
      >
        <span class="flex items-center" set:html={icons.inventory} /> Inventory
      </button>
      <button
        type="button"
        class={tabButton({ active: false })}
        data-tab="dialogue"
        aria-label="Show Dialogue tab"
      >
        <span class="flex items-center" set:html={icons.dialogue} /> Dialogue
      </button>
    </nav>
  </div>

  <!-- Tab Contents -->
  <div class="p-6">
    <!-- Description Tab (visible by default) -->
    <div class="space-y-4 tab-content" data-tab="description">
      <div class="flex gap-4 items-center">
        <Chip color="blue" icon={chipIcons.race}>{npc.race}</Chip>
        <Chip color="purple" icon={chipIcons.gender}>{npc.gender}</Chip>
        <Chip color="green" icon={chipIcons.occupation}>{npc.occupation}</Chip>
        {npc.role && <Chip color="red" icon={chipIcons.role}>{npc.role}</Chip>}
      </div>

      <div class="mt-6">
        <h3 class="text-lg font-medium text-slate-200 mb-2">Background</h3>
        <p class="text-slate-300 whitespace-pre-line">{npc.background}</p>
      </div>

      <div class="mt-4">
        <h3 class="text-lg font-medium text-slate-200 mb-2">Motivation</h3>
        <p class="text-slate-300 whitespace-pre-line">{npc.motivation}</p>
      </div>

      <div class="mt-4">
        <h3 class="text-lg font-medium text-slate-200 mb-2">Secret</h3>
        <p class="text-slate-300 whitespace-pre-line">{npc.secret}</p>
      </div>

      {npc.descriptions && npc.descriptions.length > 0 && (
        <div class="mt-4">
          <h3 class="text-lg font-medium text-slate-200 mb-2">Descriptions</h3>
          <ul class="list-disc pl-5 text-slate-300 space-y-1">
            {npc.descriptions.map((desc) => (
              <li>{desc}</li>
            ))}
          </ul>
        </div>
      )}
    </div>

    <!-- Personality Tab (hidden by default) -->
    <div class="space-y-4 tab-content hidden" data-tab="personality">
      <div class="mb-6">
        <h3 class="text-lg font-medium text-slate-200 mb-2">Quirk</h3>
        <p class="text-slate-300">{npc.quirk || "None specified"}</p>
      </div>

      {npc.personalityTraits && npc.personalityTraits.length > 0 && (
        <div>
          <h3 class="text-lg font-medium text-slate-200 mb-2">Personality Traits</h3>
          <ul class="list-disc pl-5 text-slate-300 space-y-1">
            {npc.personalityTraits.map((trait) => (
              <li>{trait}</li>
            ))}
          </ul>
        </div>
      )}

      <div class="p-4 bg-slate-800 rounded-lg border border-slate-700 mt-6">
        <div class="flex items-center mb-3">
          <span class="text-yellow-400 mr-2">üí≠</span>
          <h3 class="text-lg font-medium text-slate-200">Roleplaying Notes</h3>
        </div>
        <p class="text-slate-300 italic">
          Speaks in a hushed tone and is constantly suspicious of others. Avoids eye contact during
          conversation, but observes everyone carefully. Often fidgets with crystal beads in their
          beard when nervous.
        </p>
      </div>
    </div>

    <!-- Inventory Tab (hidden by default) -->
    <div class="tab-content hidden" data-tab="inventory">
      <h3 class="text-lg font-medium text-slate-200 mb-3">Items</h3>

      {npc.inventory && npc.inventory.length > 0 ? (
        <div class="overflow-hidden rounded-lg border border-slate-700">
          <table class="min-w-full divide-y divide-slate-700">
            <thead class="bg-slate-800">
              <tr>
                <th
                  scope="col"
                  class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider"
                >
                  Item
                </th>
                <th
                  scope="col"
                  class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider"
                >
                  Quantity
                </th>
                <th
                  scope="col"
                  class="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider"
                >
                  Notes
                </th>
              </tr>
            </thead>
            <tbody class="bg-slate-800 divide-y divide-slate-700">
              {npc.inventory.map((item) => (
                <tr class="hover:bg-slate-700">
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-300">
                    {item.item}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-300">
                    {item.quantity}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-300">
                    {item.notes || "-"}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        <p class="text-slate-400 italic">No inventory items recorded.</p>
      )}
    </div>

    <!-- Dialogue Tab (hidden by default) -->
    <div class="tab-content hidden" data-tab="dialogue">
      <h3 class="text-lg font-medium text-slate-200 mb-3">Conversation Topics</h3>

      {npc.dialogue && npc.dialogue.length > 0 ? (
        <div class="space-y-4">
          {npc.dialogue.map((dialogue) => (
            <div class="p-4 bg-slate-800 rounded-lg border border-slate-700">
              <h4 class="font-medium text-slate-200 mb-2">{dialogue.topic}</h4>
              <p class="text-slate-300 whitespace-pre-line">{dialogue.response}</p>
              {dialogue.condition && (
                <p class="mt-2 text-sm text-yellow-400 italic">
                  <span class="font-medium">Condition:</span> {dialogue.condition}
                </p>
              )}
            </div>
          ))}
        </div>
      ) : (
        <p class="text-slate-400 italic">No dialogue options recorded.</p>
      )}
    </div>
  </div>
</div>

<script>
  // Client-side JavaScript to handle the tab switching
  document.addEventListener('DOMContentLoaded', () => {
    const tabButtons = document.querySelectorAll('[data-tab]');
    const tabContents = document.querySelectorAll('.tab-content');
    
    // Function to activate a tab
    function activateTab(tabName) {
      // Update button styles
      tabButtons.forEach(button => {
        const isActive = button.getAttribute('data-tab') === tabName;
        
        // Update classes based on active state
        if (isActive) {
          button.classList.remove('border-transparent', 'text-slate-400', 'hover:text-slate-300', 'hover:border-slate-300');
          button.classList.add('border-blue-500', 'text-blue-400');
        } else {
          button.classList.remove('border-blue-500', 'text-blue-400');
          button.classList.add('border-transparent', 'text-slate-400', 'hover:text-slate-300', 'hover:border-slate-300');
        }
      });
      
      // Show the selected tab content, hide others
      tabContents.forEach(content => {
        if (content.getAttribute('data-tab') === tabName) {
          content.classList.remove('hidden');
        } else {
          content.classList.add('hidden');
        }
      });
    }
    
    // Add click event listeners to all tab buttons
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabName = button.getAttribute('data-tab');
        if (tabName) {
          activateTab(tabName);
        }
      });
    });
    
    // Initialize with the first tab as active (description)
    activateTab('description');
  });
</script>