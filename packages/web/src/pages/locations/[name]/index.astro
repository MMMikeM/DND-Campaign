---
import GradientCard from "@components/cards/GradientCard.astro";
import Icon from "@components/Icon.astro";
import { getLocation } from "@entities";
import Layout from "@layout";
import { hasItems, hasItemsWithProperty, safeArrayAccess } from "@utils/dataHelpers";
import { getEntityUrl } from "@utils/slugs";

export const prerender = false;

const { name } = Astro.params;

if (!name) {
	return Astro.redirect('/locations');
}

const location = await getLocation(name);

if (!location) {
	return Astro.redirect('/404');
}

// Get primary NPC if any
const primaryNpc = safeArrayAccess(location.npcs, 0);

// Get primary faction if any
const primaryFaction = safeArrayAccess(location.factions, 0);
---

<Layout title={location.name}>
	<div class="max-w-4xl mx-auto">
		<div class="flex justify-between items-center mb-8">
			<div class="flex items-center">
				<Icon name="map" size="lg" color="green" class="mr-3" />
				<h1 class="text-4xl font-bold">{location.name}</h1>
			</div>
			<div class="flex gap-4">
				<a 
					href={getEntityUrl('locations', location.name, location.id, 'edit')} 
					class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
				>
					<Icon name="pencil" class="mr-2" />
					Edit
				</a>
			</div>
		</div>
		
		<!-- Location Info Cards -->
		<div class="grid grid-cols-3 gap-6 mb-10">
			<GradientCard title="Type" icon="tag" colorTheme="blue">
				<p class="capitalize">{location.type}</p>
			</GradientCard>

			<GradientCard title="Region" icon="globe" colorTheme="green">
				<p>{location.region}</p>
			</GradientCard>

			<GradientCard title="Danger Level" icon="shield" colorTheme="red">
				<p class="capitalize">{location.dangerLevel}</p>
			</GradientCard>
		</div>

		<!-- Main Location Details -->
		<div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-10">
			<!-- Left Column - Core Details -->
			<div class="md:col-span-2 space-y-6">
				{location.description && (
					<GradientCard title="Description" icon="file-text" colorTheme="blue">
						<div class="space-y-4">
							{location.description.map((paragraph: string) => (
								<p>{paragraph}</p>
							))}
						</div>
					</GradientCard>
				)}

				{location.history && (
					<GradientCard title="History" icon="book-open" colorTheme="amber">
						<p>{location.history}</p>
					</GradientCard>
				)}

				{hasItems(location.notableFeatures) && (
					<GradientCard title="Notable Features" icon="eye" colorTheme="purple">
						<ul class="list-disc list-inside space-y-2 ml-6">
							{location.notableFeatures.map((feature: string) => (
								<li>{feature}</li>
							))}
						</ul>
					</GradientCard>
				)}

				{/* Related Quests */}
				{hasItemsWithProperty(location.quests, 'quest') && (
					<GradientCard title="Quests" icon="file-text" colorTheme="green">
						<div class="space-y-4">
							{location.quests.map((questRel: any) => (
								<div class="border-l-4 border-green-500 pl-4 py-2">
									<a 
										href={getEntityUrl('quests', questRel.quest.name)} 
										class="text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline"
									>
										{questRel.quest.name}
									</a>
									{questRel.description && questRel.description.length > 0 && (
										<p class="text-gray-700 mt-1">{questRel.description[0]}</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)}

				{/* NPCs */}
				{hasItemsWithProperty(location.npcs, 'npc') && (
					<GradientCard title="Notable Characters" icon="users" colorTheme="blue">
						<div class="space-y-4">
							{location.npcs.map((npcRel: any) => (
								<div class="border-l-4 border-blue-500 pl-4 py-1.5">
									<a 
										href={getEntityUrl('npcs', npcRel.npc.name)} 
										class="text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline"
									>
										{npcRel.npc.name}
									</a>
									{npcRel.context && npcRel.context.length > 0 && (
										<p class="text-gray-700 mt-1">{npcRel.context[0]}</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)}

				{/* Connected Locations */}
				{hasItemsWithProperty(location.relations, 'location') && (
					<GradientCard title="Connected Locations" icon="map" colorTheme="green">
						<div class="space-y-4">
							{location.relations.map((relation: any) => (
								<div class="border-l-4 border-green-500 pl-4 py-1.5">
									<a 
										href={getEntityUrl('locations', relation.location.name)} 
										class="text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline"
									>
										{relation.location.name}
									</a>
									{relation.description && relation.description.length > 0 && (
										<p class="text-gray-700 mt-1">{relation.description[0]}</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)}

				{hasItems(location.secrets) && (
					<GradientCard title="Secrets" icon="lock" colorTheme="red" hasSecret={true}>
						<ul class="list-disc list-inside space-y-2 ml-6">
							{location.secrets.map((secret: string) => (
								<li>{secret}</li>
							))}
						</ul>
					</GradientCard>
				)}
			</div>

			<!-- Right Column - Secondary Details -->
			<div class="space-y-6">
				{/* Primary Faction */}
				{primaryFaction?.faction && (
					<GradientCard title="Primary Faction" icon="users" colorTheme="blue">
						<div class="flex flex-col items-center text-center">
							<Icon name="flag" size="lg" class="mb-2" />
							<a 
								href={getEntityUrl('factions', primaryFaction.faction.name)} 
								class="text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline"
							>
								{primaryFaction.faction.name}
							</a>
							{primaryFaction.influence && (
								<span class="mt-2 text-xs px-3 py-1 bg-blue-900 text-blue-200 rounded-full capitalize">
									{primaryFaction.influence} influence
								</span>
							)}
						</div>
					</GradientCard>
				)}

				{/* Other Factions */}
				{hasItemsWithProperty(location.factions, 'faction') && location.factions.length > 1 && (
					<GradientCard title="Other Factions" icon="flag" colorTheme="indigo">
						<ul class="space-y-3">
							{location.factions.slice(1).map((factionRel: any) => (
								<li class="flex justify-between items-center">
									<a 
										href={getEntityUrl('factions', factionRel.faction.name)} 
										class="text-blue-600 dark:text-blue-400 hover:underline"
									>
										{factionRel.faction.name}
									</a>
									{factionRel.influence && (
										<span class="text-xs px-2 py-1 bg-gray-700 text-gray-300 rounded-full capitalize">
											{factionRel.influence}
										</span>
									)}
								</li>
							))}
						</ul>
					</GradientCard>
				)}

				{/* Areas */}
				{hasItems(location.areas) && (
					<GradientCard title="Areas" icon="layout-grid" colorTheme="green">
						<div class="space-y-4">
							{location.areas.map((area: any) => (
								<div class="border-l-4 border-green-500 pl-4 py-2">
									<h3 class="font-semibold text-lg">{area.name}</h3>
									<div class="text-gray-600 dark:text-gray-400 text-sm mb-2">
										<span class="inline-block px-2 py-0.5 bg-gray-100 dark:bg-gray-700 rounded-full capitalize">{area.areaType}</span>
									</div>
									{area.description && area.description.length > 0 && (
										<p class="text-gray-700 dark:text-gray-300">{area.description[0]}</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)}

				{/* Encounters */}
				{hasItems(location.encounters) && (
					<GradientCard title="Encounters" icon="zap" colorTheme="red">
						<div class="space-y-4">
							{location.encounters.map((encounter: any) => (
								<div class="border-l-4 border-red-500 pl-4 py-2">
									<h3 class="font-semibold text-lg">{encounter.name}</h3>
									<div class="text-gray-600 dark:text-gray-400 text-sm mb-2 flex items-center gap-2">
										<span class="inline-block px-2 py-0.5 bg-gray-100 dark:bg-gray-700 rounded-full capitalize">{encounter.encounterType}</span>
										{encounter.difficulty && (
											<span class="text-gray-700 dark:text-gray-300">Difficulty: {encounter.difficulty}</span>
										)}
									</div>
									{encounter.description && encounter.description.length > 0 && (
										<p class="text-gray-700 dark:text-gray-300">{encounter.description[0]}</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)}
			</div>
		</div>
	</div>
</Layout>