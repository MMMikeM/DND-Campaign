---
import Layout from '../../layouts/Layout.astro';
import { db } from '../../db';
import { desc } from 'drizzle-orm';

export const prerender = false;

// Get category from URL
const { category } = Astro.params;

// Set defaults
let title = '';
let items = [];
let entityType = '';

// Determine which data to fetch based on category
switch (category) {
  case 'npcs':
    title = 'NPCs';
    entityType = 'npc';
    items = await db.query.npcs.findMany({
      orderBy: (npcs, { desc }) => [desc(npcs.id)]
    });
    break;
  case 'factions':
    title = 'Factions';
    entityType = 'faction';
    items = await db.query.factions.findMany({
      orderBy: (factions, { desc }) => [desc(factions.id)]
    });
    break;
  case 'locations':
    title = 'Locations';
    entityType = 'location';
    items = await db.query.locations.findMany({
      orderBy: (locations, { desc }) => [desc(locations.id)]
    });
    break;
  case 'quests':
    title = 'Quests';
    entityType = 'quest';
    items = await db.query.quests.findMany({
      orderBy: (quests, { desc }) => [desc(quests.id)]
    });
    break;
  default:
    // Redirect to homepage if category is not valid
    return Astro.redirect('/');
}

// Helper function to get display property based on entity type
const getDisplayProperty = (item) => {
  switch (category) {
    case 'quests':
      return item.title;
    default:
      return item.name;
  }
};

// Helper function to get entity-specific tag
const getEntityTag = (item) => {
  switch (category) {
    case 'factions':
      return item.type;
    case 'npcs':
      return item.race || item.occupation;
    case 'quests':
      return item.status || 'Active';
    case 'locations':
      return item.type || 'Location';
    default:
      return null;
  }
};
---

<Layout title={title} currentPath={`/${category}`}>
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-4xl font-bold text-white">{title}</h1>
    <a href={`/${category}/new`} class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700">
      New {entityType.charAt(0).toUpperCase() + entityType.slice(1)}
    </a>
  </div>
  
  <div class="grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
    {items.map((item) => (
      <div class="bg-gray-800 shadow rounded-lg p-6 border border-gray-700">
        <div class="flex justify-between items-start mb-4">
          <h2 class="text-2xl font-semibold text-white">{getDisplayProperty(item)}</h2>
          <div class="flex flex-col items-end gap-1">
            {getEntityTag(item) && (
              <span class="px-3 py-1 bg-indigo-900 text-indigo-100 rounded-full text-sm">
                {getEntityTag(item)}
              </span>
            )}
            {category === 'factions' && item.alignment && (
              <span class="text-sm text-gray-400">{item.alignment}</span>
            )}
          </div>
        </div>
        
        {item.description && (
          <p class="text-gray-400 line-clamp-3 mb-4">{item.description}</p>
        )}
        
        {category === 'factions' && item.headquarters && (
          <p class="text-sm text-gray-400 italic">HQ: {item.headquarters}</p>
        )}
        
        {category === 'npcs' && item.location && (
          <p class="text-sm text-gray-400 italic">Location: {item.location}</p>
        )}
        
        {category === 'quests' && item.giver && (
          <p class="text-sm text-gray-400 italic">Quest Giver: {item.giver}</p>
        )}
        
        <div class="mt-4 flex justify-end gap-4">
          <a href={`/${category}/${item.id}`} class="text-indigo-400 hover:text-indigo-300">
            View
          </a>
          <a href={`/${category}/${item.id}/edit`} class="text-indigo-400 hover:text-indigo-300">
            Edit
          </a>
          <button
            type="button"
            data-id={item.id}
            data-entity-type={entityType}
            class="text-red-400 hover:text-red-300 delete-item"
          >
            Delete
          </button>
        </div>
      </div>
    ))}
  </div>
  
  {items.length === 0 && (
    <div class="text-center py-10">
      <p class="text-gray-400">No {title.toLowerCase()} found. Create your first {entityType} to get started.</p>
    </div>
  )}
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.delete-item').forEach((button) => {
      button.addEventListener('click', async () => {
        const id = button.getAttribute('data-id');
        const entityType = button.getAttribute('data-entity-type');
        if (!id || !entityType) return;

        if (!confirm(`Are you sure you want to delete this ${entityType}?`)) return;

        try {
          const response = await fetch(`/api/${entityType}s/${id}`, {
            method: 'DELETE'
          });

          if (response.ok) {
            // Remove the item card from the UI
            const itemCard = button.closest('.bg-gray-800');
            if (itemCard) {
              itemCard.remove();
            }
          } else {
            const data = await response.json();
            throw new Error(data.error || `Failed to delete ${entityType}`);
          }
        } catch (error) {
          console.error('Error:', error);
          alert(`An error occurred while deleting the ${entityType}`);
        }
      });
    });
  });
</script>
