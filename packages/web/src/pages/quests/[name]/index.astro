---

import GradientCard from "@components/cards/GradientCard.astro";
import Icon from "@components/Icon.astro";
import { getQuest } from "@entities";
import Layout from "@layout";
import { hasItems, hasItemsWithProperty, safeArrayAccess } from "@utils/dataHelpers";
import { getEntityUrl } from "@utils/slugs";


export const prerender = false;

const { name } = Astro.params;

if (!name) {
	return Astro.redirect('/quests');
}

const quest = await getQuest(name);

if (!quest) {
	return Astro.redirect('/404');
}

// Get quest giver if any
const questGiver = safeArrayAccess(
	quest.npcs?.filter(npc => npc.role === 'quest giver'),
	0
);

// Get first location
const primaryLocation = safeArrayAccess(quest.locations, 0);

// Get first reward
const firstReward = safeArrayAccess(quest.rewards, 0);

---

<Layout title={quest.name}>
	<div class="max-w-4xl mx-auto">
		<div class="flex justify-between items-center mb-8">
			<div class="flex items-center">
				<Icon name="scroll" size="lg" color="green" class="mr-3" />
				<h1 class="text-4xl font-bold">{quest.name}</h1>
			</div>
			<div class="flex gap-4">
				<a 
					href={getEntityUrl('quests', quest.name, quest.id, 'edit')} 
					class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
				>
					<Icon name="pencil" class="mr-2" />
					Edit
				</a>
				<button
					type="button"
					data-quest-id={quest.id}
					class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 delete-quest flex items-center"
				>
					<Icon name="trash" class="mr-2" />
					Delete
				</button>
			</div>
		</div>
		
		<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
			<div class="md:col-span-2">
				<GradientCard
					colorTheme="green"
					title="Basic Information"
					icon="info"
				>
					<div class="grid grid-cols-2 gap-6">
						<div>
							<p class="text-sm text-gray-500">Type</p>
							<p class="font-medium">{quest.type}</p>
						</div>
						{quest.difficulty && (
							<div>
								<p class="text-sm text-gray-500">Difficulty</p>
								<p class="font-medium">{quest.difficulty}</p>
							</div>
						)}
						{questGiver && "npc" in questGiver && (
							<div>
								<p class="text-sm text-gray-500">Quest Giver</p>
								<p class="font-medium flex items-center">
									<Icon name="user" class="mr-1" />
									<a href={getEntityUrl('npcs', questGiver.npc?.name)}>
										{questGiver.npc?.name || 'Quest Giver'}
									</a>
								</p>
							</div>
						)}
						{primaryLocation && (
							<div>
								<p class="text-sm text-gray-500">Main Location</p>
								<p class="font-medium flex items-center">
									<Icon name="map-pin" class="mr-1" />
									<a 
										href={getEntityUrl('locations', primaryLocation.location.name)} 
										class="text-white underline hover:no-underline"
									>
										{primaryLocation.location.name}
									</a>
								</p>
							</div>
						)}
						{firstReward && (
							<div>
								<p class="text-sm text-gray-500">Rewards</p>
								<p class="font-medium flex items-center">
									<Icon name="gem" class="mr-1" />
									{firstReward}
								</p>
							</div>
						)}
						{quest.timeframe && (
							<div class="col-span-2">
								<p class="text-sm text-gray-500">Timeframe</p>
								<p class="font-medium flex items-center">
									<Icon name="clock" class="mr-1" />
									{quest.timeframe}
								</p>
							</div>
						)}
					</div>
				</GradientCard>
			</div>
			
			<div class="md:col-span-1">
				<GradientCard
					colorTheme="green"
					title="Quick Actions"
					icon="zap"
				>
					<div class="flex flex-col gap-2">
						<a href="/quests" class="text-green-600 hover:text-green-800 flex items-center">
							<Icon name="arrow-left" class="mr-2" />
							Back to Quests
						</a>
						<!-- Additional quick actions could be added here -->
					</div>
				</GradientCard>
			</div>
		</div>
		
		{hasItems(quest.description) && (
			<GradientCard title="Description" icon="file-text" colorTheme="blue">
				<div class="space-y-4">
					{quest.description?.map((paragraph: string) => (
						<p>{paragraph}</p>
					))}
				</div>
			</GradientCard>
		)}
		
		{hasItems(quest.objectives) && (
			<GradientCard title="Objectives" icon="check" colorTheme="green">
				<ul class="list-disc list-inside space-y-2 ml-6">
					{quest.objectives?.map((objective: string) => (
						<li>{objective}</li>
					))}
				</ul>
			</GradientCard>
		)}
		
		{hasItems(quest.stages) && (
			<GradientCard title="Quest Stages" icon="git-branch" colorTheme="green">
				<div class="space-y-6">
					{quest.stages.sort((a: any, b: any) => a.stage - b.stage).map((stage: any) => (
						<div class="relative border-l-2 border-green-500 pl-6 pb-6">
							<div class="absolute -left-3 top-0 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center text-white font-bold">
								{stage.stage}
							</div>
							
							<h4 class="text-xl font-semibold mb-2">{stage.title}</h4>
							
							{stage.description && stage.description.length > 0 && (
								<div class="mb-4 space-y-2">
									{stage.description.map((para: string) => (
										<p>{para}</p>
									))}
								</div>
							)}
							
							{stage.objectives && stage.objectives.length > 0 && (
								<div class="mb-4">
									<h5 class="font-medium mb-2">Objectives</h5>
									<ul class="list-disc list-inside ml-4 space-y-1">
										{stage.objectives.map((objective: string) => (
											<li>{objective}</li>
										))}
									</ul>
								</div>
							)}
							
							{stage.locations && stage.locations.length > 0 && (
								<div class="mb-4">
									<h5 class="font-medium mb-2">Locations</h5>
									<ul class="list-disc list-inside ml-4 space-y-1">
										{stage.locations.map((location: string) => (
											<li>{location}</li>
										))}
									</ul>
								</div>
							)}
							
							{stage.encounters && stage.encounters.length > 0 && (
								<div class="mb-4">
									<h5 class="font-medium mb-2">Encounters</h5>
									<ul class="list-disc list-inside ml-4 space-y-1">
										{stage.encounters.map((encounter: string) => (
											<li>{encounter}</li>
										))}
									</ul>
								</div>
							)}
							
							{stage.completionPaths && stage.completionPaths.length > 0 && (
								<div>
									<h5 class="font-medium mb-2">Completion Options</h5>
									<ul class="list-disc list-inside ml-4 space-y-1">
										{stage.completionPaths.map((path: string) => (
											<li>{path}</li>
										))}
									</ul>
								</div>
							)}
						</div>
					))}
				</div>
			</GradientCard>
		)}

		{quest.stages && quest.stages.some((stage: any) => hasItems(stage.decisions)) && (
			<GradientCard title="Decision Points" icon="git-merge" colorTheme="red">
				<div class="space-y-6">
					{quest.stages.filter((stage: any) => hasItems(stage.decisions)).map((stage: any) => 
						stage.decisions.map((decision: any, index: number) => (
							<div class="border-l-4 border-red-500 pl-4 py-2">
								<h4 class="text-lg font-semibold mb-2">Decision #{index + 1} (Stage {stage.stage})</h4>
								
								{decision.description && decision.description.length > 0 && (
									<div class="mb-4 space-y-2">
										{Array.isArray(decision.description) 
											? decision.description.map((para: string) => (
												<p>{para}</p>
											))
											: <p>{decision.description}</p>
										}
									</div>
								)}
								
								{decision.options && decision.options.length > 0 && (
									<div class="mb-4">
										<h5 class="font-medium mb-2">Options</h5>
										<ul class="list-disc list-inside ml-4 space-y-1">
											{decision.options.map((option: string) => (
												<li>{option}</li>
											))}
										</ul>
									</div>
								)}
								
								{decision.consequences && decision.consequences.length > 0 && (
									<div>
										<h5 class="font-medium mb-2">Consequences</h5>
										<ul class="list-disc list-inside ml-4 space-y-1">
											{Array.isArray(decision.consequences)
												? decision.consequences.map((consequence: string) => (
													<li>{consequence}</li>
												))
												: <li>{decision.consequences}</li>
											}
										</ul>
									</div>
								)}
							</div>
						))
					)}
				</div>
			</GradientCard>
		)}

		{hasItems(quest.rewards) && (
			<GradientCard title="Rewards" icon="award" colorTheme="amber">
				<ul class="list-disc list-inside space-y-2 ml-4">
					{quest.rewards?.map((reward: string) => (
						<li>{reward}</li>
					))}
				</ul>
			</GradientCard>
		)}

		{hasItems(quest.clues) && (
			<GradientCard title="Clues" icon="search" colorTheme="indigo">
				<ul class="list-disc list-inside space-y-2 ml-6">
					{quest.clues?.map((clue: string) => (
						<li>{clue}</li>
					))}
				</ul>
			</GradientCard>
		)}

		{hasItems(quest.hooks) && (
			<GradientCard title="Hooks" icon="anchor" colorTheme="purple">
				<ul class="list-disc list-inside space-y-2 ml-6">
					{quest.hooks?.map((hook: string) => (
						<li>{hook}</li>
					))}
				</ul>
			</GradientCard>
		)}
		
		{hasItems(quest.prerequisites) && (
			<GradientCard title="Prerequisites" icon="info" colorTheme="amber">
				<ul class="list-disc list-inside space-y-2 ml-6">
					{quest.prerequisites?.map((prereq: string) => (
						<li>{prereq}</li>
					))}
				</ul>
			</GradientCard>
		)}

		{hasItemsWithProperty(quest.npcs, 'npc') && (
			<GradientCard title="Key NPCs" icon="users" colorTheme="blue">
				<div class="space-y-3">
					{quest.npcs.map((npcRel: any) => (
						<div class="flex justify-between items-center">
							<a 
								href={getEntityUrl('npcs', npcRel.npc.name)} 
								class="text-blue-600 dark:text-blue-400 hover:underline"
							>
								{npcRel.npc.name}
							</a>
							{npcRel.role && (
								<span class="text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full capitalize">
									{npcRel.role}
								</span>
							)}
						</div>
					))}
				</div>
			</GradientCard>
		)}

		{hasItemsWithProperty(quest.locations, 'location') && (
			<GradientCard title="Locations" icon="map-pin" colorTheme="green">
				<ul class="space-y-3">
					{quest.locations.map((locationRel: any) => (
						<li>
							<a 
								href={getEntityUrl('locations', locationRel.location.name)} 
								class="text-blue-600 dark:text-blue-400 hover:underline"
							>
								{locationRel.location.name}
							</a>
						</li>
					))}
				</ul>
			</GradientCard>
		)}

		{hasItemsWithProperty(quest.factions, 'faction') && (
			<GradientCard title="Involved Factions" icon="flag" colorTheme="indigo">
				<div class="space-y-3">
					{quest.factions.map((factionRel: any) => (
						<div>
							<div class="flex justify-between items-center">
								<a 
									href={getEntityUrl('factions', factionRel.faction.name)} 
									class="text-blue-600 dark:text-blue-400 hover:underline"
								>
									{factionRel.faction.name}
								</a>
								{factionRel.role && (
									<span class="text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full capitalize">
										{factionRel.role}
									</span>
								)}
							</div>
							{factionRel.interest && factionRel.interest.length > 0 && (
								<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">{factionRel.interest[0]}</p>
							)}
						</div>
					))}
				</div>
			</GradientCard>
		)}

		{hasItemsWithProperty(quest.relatedQuests, 'quest') && (
			<GradientCard title="Related Quests" icon="git-pull-request" colorTheme="purple">
				<ul class="space-y-3">
					{quest.relatedQuests.map((questRel: any) => (
						<li class="flex justify-between items-center">
							<a 
								href={getEntityUrl('quests', questRel.quest.name)} 
								class="text-blue-600 dark:text-blue-400 hover:underline"
							>
								{questRel.quest.name}
							</a>
							{questRel.isRequired && (
								<span class="text-xs px-2 py-1 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200 rounded-full">
									Required
								</span>
							)}
						</li>
					))}
				</ul>
			</GradientCard>
		)}
	</div>
</Layout>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const deleteButton = document.querySelector('.delete-quest');
		if (!deleteButton) return;
		
		deleteButton.addEventListener('click', async () => {
			const questId = deleteButton.getAttribute('data-quest-id');
			if (!questId) return;

			if (!confirm('Are you sure you want to delete this quest?')) return;

			try {
				const response = await fetch(`/api/quests/${questId}`, {
					method: 'DELETE'
				});

				if (response.ok) {
					window.location.href = '/quests';
				} else {
					const data = await response.json();
					throw new Error(data.error || 'Failed to delete quest');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('An error occurred while deleting the quest');
			}
		});
	});
</script>