---

import GradientCard from "@components/cards/GradientCard.astro";
import Icon from "@components/Icon.astro";
import { getQuest } from "@entities";
import Layout from "@layout";
import { hasItems, hasItemsWithProperty, safeArrayAccess } from "@utils/dataHelpers";


export const prerender = false;

const { name } = Astro.params;

if (!name) {
	return Astro.redirect('/quests');
}

const quest = await getQuest(name);

if (!quest) {
	return Astro.redirect('/404');
}

// Get quest giver if any
const questGiver = safeArrayAccess(
	quest.npcs?.filter(npc => npc.role === 'quest giver'),
	0
);

// Get first location
const primaryLocation = safeArrayAccess(quest.locations, 0);

// Get first reward
const firstReward = safeArrayAccess(quest.rewards, 0);

---

<Layout title={quest.name}>
	<div class="max-w-4xl mx-auto">
		<div class="flex justify-between items-center mb-8">
			<div class="flex items-center">
				<Icon name="scroll" size="lg" color="green" class="mr-3" />
				<h1 class="text-4xl font-bold">{quest.name}</h1>
			</div>
			<div class="flex gap-4">
				<a 
					href={`/quests/${quest.id}/edit`} 
					class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
				>
					<Icon name="pencil" class="mr-2" />
					Edit
				</a>
				<button
					type="button"
					data-quest-id={quest.id}
					class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 delete-quest flex items-center"
				>
					<Icon name="trash" class="mr-2" />
					Delete
				</button>
			</div>
		</div>
		
		<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
			<div class="md:col-span-2">
				<GradientCard
					colorTheme="green"
					title="Basic Information"
					icon="info"
				>
					<div class="grid grid-cols-2 gap-6">
						<div>
							<p class="text-sm text-gray-500">Type</p>
							<p class="font-medium">{quest.type}</p>
						</div>
						{quest.difficulty && (
							<div>
								<p class="text-sm text-gray-500">Difficulty</p>
								<p class="font-medium">{quest.difficulty}</p>
							</div>
						)}
						{questGiver && "npc" in questGiver && (
							<div>
								<p class="text-sm text-gray-500">Quest Giver</p>
								<p class="font-medium flex items-center">
									<Icon name="user" class="mr-1" />
									<a href={`/npcs/${questGiver.npcId}`}>
										{questGiver.npc?.name || 'Quest Giver'}
									</a>
								</p>
							</div>
						)}
						{primaryLocation && (
							<div>
								<p class="text-sm text-gray-500">Main Location</p>
								<p class="font-medium flex items-center">
									<Icon name="map-pin" class="mr-1" />
									<a href={`/locations/${primaryLocation.locationId}`}>
										{primaryLocation.location?.name || 'Main Location'}
									</a>
								</p>
							</div>
						)}
						{firstReward && (
							<div>
								<p class="text-sm text-gray-500">Rewards</p>
								<p class="font-medium flex items-center">
									<Icon name="gem" class="mr-1" />
									{firstReward}
								</p>
							</div>
						)}
						{quest.timeframe && (
							<div>
								<p class="text-sm text-gray-500">Timeframe</p>
								<p class="font-medium flex items-center">
									<Icon name="clock" class="mr-1" />
									{quest.timeframe}
								</p>
							</div>
						)}
					</div>
				</GradientCard>
			</div>
			
			<div class="md:col-span-1">
				<GradientCard
					colorTheme="green"
					title="Quick Actions"
					icon="zap"
				>
					<div class="flex flex-col gap-2">
						<a href="/quests" class="text-green-600 hover:text-green-800 flex items-center">
							<Icon name="arrow-left" class="mr-2" />
							Back to Quests
						</a>
						<!-- Additional quick actions could be added here -->
					</div>
				</GradientCard>
			</div>
		</div>
		
		{quest.description && (
			<div class="mb-6">
				<GradientCard
					colorTheme="green"
					title="Description"
					icon="book-open"
				>
					<p class="whitespace-pre-line">{Array.isArray(quest.description) ? quest.description.join('\n') : quest.description}</p>
				</GradientCard>
			</div>
		)}
		
		{hasItems(quest.objectives) && (
			<div class="mb-6">
				<GradientCard
					colorTheme="blue"
					title="Objectives"
					icon="target"
				>
					<ul class="list-disc list-inside space-y-2">
						{quest.objectives?.map((objective) => (
							<li class="flex items-start">
								<Icon name="chevron-right" size="sm" color="blue" class="mr-2 mt-1 flex-shrink-0" />
								<span>{objective}</span>
							</li>
						))}
					</ul>
				</GradientCard>
			</div>
		)}
		
		{hasItems(quest.stages) && (
			<div class="mb-6">
				<GradientCard
					colorTheme="blue"
					title="Quest Stages"
					icon="list-ordered"
				>
					<div class="space-y-4">
						{quest.stages.map((stage, index) => (
							<div class="flex items-start">
								<div class="flex-shrink-0 h-8 w-8 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center text-blue-600 dark:text-blue-300 font-semibold">
									{stage.stage}
								</div>
								<div class="ml-4">
									<h3 class="font-medium text-gray-900 dark:text-gray-100">{stage.title}</h3>
									{stage.description && (
										<p class="text-gray-600 dark:text-gray-300 mt-1">
											{Array.isArray(stage.description) ? stage.description.join('\n') : stage.description}
										</p>
									)}
									{stage.objectives && hasItems(stage.objectives) && (
										<div class="mt-2">
											<p class="text-sm text-gray-500">Stage Objectives:</p>
											<ul class="list-disc list-inside mt-1">
												{stage.objectives.map((obj: string) => (
													<li class="text-gray-600">{obj}</li>
												))}
											</ul>
										</div>
									)}
								</div>
							</div>
						))}
					</div>
				</GradientCard>
			</div>
		)}

		{hasItems(quest.stages) && quest.stages.some(stage => hasItems(stage.completionPaths)) && (
			<div class="mb-6">
				<GradientCard
					colorTheme="green"
					title="Completion Paths"
					icon="check"
				>
					<div class="space-y-6">
						{quest.stages?.filter(stage => hasItems(stage.completionPaths)).map((stage) => (
							<div class="border-l-4 border-green-400 pl-4">
								<div class="flex items-center">
									<div class="flex-shrink-0 h-6 w-6 rounded-full bg-green-100 dark:bg-green-900 flex items-center justify-center text-green-600 dark:text-green-300 text-sm font-medium">
										{stage.stage}
									</div>
									<h3 class="ml-2 font-medium text-gray-900 dark:text-gray-100">{stage.title || 'Completion Path'}</h3>
								</div>
								<p class="mt-2 text-gray-600 dark:text-gray-300">{Array.isArray(stage.completionPaths) ? stage.completionPaths.join('\n') : stage.completionPaths}</p>
							</div>
						))}
					</div>
				</GradientCard>
			</div>
		)}

		{hasItems(quest.stages) && quest.stages.some(stage => hasItems(stage.decisions)) && (
			<div class="mb-6">
				<GradientCard
					colorTheme="purple"
					title="Decision Points"
					icon="git-branch"
				>
					<div class="space-y-4">
						{quest.stages.filter(stage => hasItems(stage.decisions)).map((stage) => (
							<div class="flex items-start">
								<div class="flex-shrink-0 h-6 w-6 rounded-full bg-purple-100 dark:bg-purple-900 flex items-center justify-center text-purple-600 dark:text-purple-300 text-sm font-medium">
									{stage.stage}
								</div>
								<div class="ml-3">
									<h4 class="font-medium">{stage.title || `Stage ${stage.stage}`}</h4>
									{stage.decisions && stage.decisions.map((decision: any) => (
										<p class="text-gray-600 dark:text-gray-300 mt-2">{decision.description}</p>
									))}
								</div>
							</div>
						))}
					</div>
				</GradientCard>
			</div>
		)}

		{hasItems(quest.stages) && quest.stages.some(stage => hasItems(stage.decisions) && stage.decisions.some(d => hasItems(d.options))) && (
			<div class="mb-6">
				<GradientCard
					colorTheme="amber"
					title="Decision Choices"
					icon="list-checks"
				>
					<div class="space-y-6">
						{quest.stages.filter(stage => hasItems(stage.decisions) && stage.decisions.some(d => hasItems(d.options))).map((stage) => (
							<div class="border-l-4 border-amber-400 pl-4">
								<div class="flex items-center">
									<div class="flex-shrink-0 h-6 w-6 rounded-full bg-amber-100 dark:bg-amber-900 flex items-center justify-center text-amber-600 dark:text-amber-300 text-sm font-medium">
										{stage.stage}
									</div>
									<h3 class="ml-2 font-medium text-gray-900 dark:text-gray-100">{stage.title || `Stage ${stage.stage}`}</h3>
								</div>
								{stage.decisions && stage.decisions.map((decision: any) => (
									<div class="mt-2">
										<p class="font-medium">{decision.description}</p>
										{hasItems(decision.options) && (
											<ul class="list-disc list-inside mt-2">
												{decision.options.map((option: string) => (
													<li class="text-gray-600 dark:text-gray-300">{option}</li>
												))}
											</ul>
										)}
										{hasItems(decision.consequences) && (
											<div class="mt-2">
												<p class="text-sm font-medium text-gray-500">Consequences:</p>
												<p class="text-gray-600 dark:text-gray-300">{Array.isArray(decision.consequences) ? decision.consequences.join('\n') : decision.consequences}</p>
											</div>
										)}
									</div>
								))}
							</div>
						))}
					</div>
				</GradientCard>
			</div>
		)}
		
		{hasItems(quest.rewards) && (
			<div class="mb-6">
				<GradientCard
					colorTheme="amber"
					title="Rewards"
					icon="gem"
				>
					<ul class="list-disc list-inside space-y-2">
						{quest.rewards?.map((reward: string) => (
							<li class="flex items-start">
								<Icon name="gem" size="sm" color="amber" class="mr-2 mt-1 flex-shrink-0" />
								<span>{reward}</span>
							</li>
						))}
					</ul>
				</GradientCard>
			</div>
		)}

		{hasItems(quest.clues) && (
			<div class="mb-6">
				<GradientCard
					colorTheme="pink"
					title="Clues"
					icon="search"
				>
					<ul class="list-disc list-inside space-y-2">
						{quest.clues.map((clue: any) => (
							<li class="flex items-start">
								<Icon name="search" size="sm" color="pink" class="mr-2 mt-1 flex-shrink-0" />
								<div>
									<span>{clue.description || clue}</span>
									{clue.pointsTo && (
										<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
											Points to: {Array.isArray(clue.pointsTo) ? clue.pointsTo.join(', ') : clue.pointsTo}
										</p>
									)}
									{clue.discoveryCondition && (
										<p class="text-sm text-gray-600 dark:text-gray-400">
											Discovery: {Array.isArray(clue.discoveryCondition) ? clue.discoveryCondition.join('\n') : clue.discoveryCondition}
										</p>
									)}
								</div>
							</li>
						))}
					</ul>
				</GradientCard>
			</div>
		)}

		{hasItems(quest.hooks) && (
			<div class="mb-6">
				<GradientCard
					colorTheme="purple"
					title="Hooks"
					icon="link"
				>
					<ul class="list-disc list-inside space-y-2">
						{quest.hooks?.map((hook: string) => (
							<li class="flex items-start">
								<Icon name="link" size="sm" color="purple" class="mr-2 mt-1 flex-shrink-0" />
								<span>{hook}</span>
							</li>
						))}
					</ul>
				</GradientCard>
			</div>
		)}
		
		{hasItems(quest.prerequisites) && (
			<div class="mb-6">
				<GradientCard
					colorTheme="gray"
					title="Prerequisites"
					icon="info"
				>
					<ul class="list-disc list-inside space-y-2">
						{quest.prerequisites?.map((prereq: string) => (
							<li class="flex items-start">
								<Icon name="info" size="sm" color="gray" class="mr-2 mt-1 flex-shrink-0" />
								<span>{prereq}</span>
							</li>
						))}
					</ul>
				</GradientCard>
			</div>
		)}

		{hasItemsWithProperty(quest.npcs, 'npcId') && (
			<div class="mb-6">
				<GradientCard
					colorTheme="blue"
					title="Key Characters"
					icon="users"
				>
					<ul class="space-y-4">
						{quest.npcs.map((char: any) => (
							<li class="flex items-start">
								<Icon name="user" size="sm" color="blue" class="mr-2 mt-1 flex-shrink-0" />
								<div>
									<a href={`/npcs/${char.npcId}`} class="font-medium hover:text-blue-600 transition-colors">
										{char.npc?.name || 'Unknown character'}
									</a>
									<div class="text-sm text-gray-600 dark:text-gray-400">
										{char.role && <span class="mr-2">{char.role}</span>}
										{char.importance && <span class="text-gray-400">({char.importance})</span>}
									</div>
									{hasItems(char.notes) && (
										<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
											{Array.isArray(char.notes) ? char.notes.join('\n') : char.notes}
										</p>
									)}
								</div>
							</li>
						))}
					</ul>
				</GradientCard>
			</div>
		)}

		{hasItemsWithProperty(quest.locations, 'locationId') && (
			<div class="mb-6">
				<GradientCard
					colorTheme="amber"
					title="Quest Locations"
					icon="map-pin"
				>
					<ul class="space-y-4">
						{quest.locations.map((loc: any) => (
							<li class="flex items-start">
								<Icon name="map-pin" size="sm" color="amber" class="mr-2 mt-1 flex-shrink-0" />
								<div>
									<a href={`/locations/${loc.locationId}`} class="font-medium hover:text-amber-600 transition-colors">
										{loc.location?.name || 'Unknown location'}
									</a>
									{loc.stage && (
										<div class="text-sm text-gray-600 dark:text-gray-400">
											Stage: {loc.stage}
										</div>
									)}
									{hasItems(loc.description) && (
										<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
											{Array.isArray(loc.description) ? loc.description.join('\n') : loc.description}
										</p>
									)}
								</div>
							</li>
						))}
					</ul>
				</GradientCard>
			</div>
		)}

		{hasItemsWithProperty(quest.factions, 'factionId') && (
			<div class="mb-6">
				<GradientCard
					colorTheme="purple"
					title="Involved Factions"
					icon="flag"
				>
					<ul class="space-y-4">
						{quest.factions.map((faction: any) => (
							<li class="flex items-start">
								<Icon name="flag" size="sm" color="purple" class="mr-2 mt-1 flex-shrink-0" />
								<div>
									<a href={`/factions/${faction.factionId}`} class="font-medium hover:text-purple-600 transition-colors">
										{faction.faction?.name || 'Unknown faction'}
									</a>
									{faction.role && (
										<div class="text-sm text-gray-600 dark:text-gray-400">
											Role: {faction.role}
										</div>
									)}
									{hasItems(faction.interest) && (
										<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
											{Array.isArray(faction.interest) ? faction.interest.join('\n') : faction.interest}
										</p>
									)}
								</div>
							</li>
						))}
					</ul>
				</GradientCard>
			</div>
		)}
	</div>
</Layout>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const deleteButton = document.querySelector('.delete-quest');
		if (!deleteButton) return;
		
		deleteButton.addEventListener('click', async () => {
			const questId = deleteButton.getAttribute('data-quest-id');
			if (!questId) return;

			if (!confirm('Are you sure you want to delete this quest?')) return;

			try {
				const response = await fetch(`/api/quests/${questId}`, {
					method: 'DELETE'
				});

				if (response.ok) {
					window.location.href = '/quests';
				} else {
					const data = await response.json();
					throw new Error(data.error || 'Failed to delete quest');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('An error occurred while deleting the quest');
			}
		});
	});
</script>