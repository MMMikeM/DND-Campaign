---
import { getQuest } from "@entities";
import Layout from "@layout";
import TwoColumnGrid from "@components/TwoColumnGrid.astro";
import Chip, { type Props as ChipProps } from "@components/Chip.astro";
import List from "@components/List.astro";
import { createAnimationScope } from "astro:transitions";
import GradientCard from "@components/cards/GradientCard.astro";
import ChipList from "@components/ChipList.astro";

export const prerender = false;

const { slug } = Astro.params;

if (!slug) {
	return Astro.redirect("/quests");
}

const quest = await getQuest(slug);

if (!quest) {
	return Astro.redirect("/404");
}

const {
	description,
	objectives,
	rewards,
	prerequisites,
	stages,
	npcs,
	factions,
	creativePrompts,
	failureOutcomes,
	inspirations,
	mood,
	name,
	region,
	requiredBy,
	requires,
	successOutcomes,
	themes,
	twists,
	type,
	urgency,
	items,
	visibility,
} = quest;

const chips = [
	{
		item: type,
		color: "blue",
		icon: {
			name: "tag",
		},
	},
	{
		item: urgency,
		color: "green",
		icon: {
			name: "shield",
		},
	},
	{
		item: visibility,
		color: "blue",
		icon: {
			name: "eye",
		},
	},
	{
		item: region?.name,
		color: "blue",
		icon: {
			name: "map",
		},
	},
	{
		item: mood,
		color: "blue",
		icon: {
			name: "smile",
		},
	},
] satisfies (ChipProps & { item?: string | null })[];
---

<Layout title={name}>
	<TwoColumnGrid title={name}>
		<Fragment slot="header">
			<ChipList items={chips} />
		</Fragment>
		<Fragment slot="left-column">
			<List items={description} title="Description" />
			<List items={prerequisites} title="Prerequisites" />
			<List items={objectives} title="Objectives" />
			<List items={rewards} title="Rewards" />
			<List items={creativePrompts} title="Creative Prompts" />
			<List items={failureOutcomes} title="Failure Outcomes" />
			<List items={successOutcomes} title="Success Outcomes" />
			<List items={inspirations} title="Inspirations" />
			<List items={themes} title="Themes" />
			<List items={prerequisites} title="Prerequisites" />

			{
				requiredBy &&
					requiredBy.map(({ creativePrompts, relationType, description }) => (
						<>
							<p>{relationType}</p>
							<List items={description} title="Description" />
							<List items={creativePrompts} title="Creative Prompts" />
						</>
					))
			}
			{
				npcs &&
					npcs.map(({ npc, creativePrompts, description, dramaticMoments, hiddenAspects, importance, role }) => (
						<GradientCard title="NPC">
							<p>{npc.name}</p>
							{importance && (
								<Chip color="blue" icon={{ name: "star" }}>
									{importance}
								</Chip>
							)}
							{role && (
								<Chip color="blue" icon={{ name: "tag" }}>
									{role}
								</Chip>
							)}
							<List items={description} title="Description" />
							<List items={dramaticMoments} title="Dramatic Moments" />
							<List items={hiddenAspects} title="Hidden Aspects" />
							<List items={creativePrompts} title="Creative Prompts" />
						</GradientCard>
					))
			}
			{
				factions &&
					factions.map(({ interest, role, faction }) => (
						<GradientCard title="Faction">
							<p>{faction?.name}</p>
							<p>{role}</p>
							<p>{interest}</p>
							<List items={description} title="Description" />
							<List items={creativePrompts} title="Creative Prompts" />
						</GradientCard>
					))
			}
			{
				items &&
					items.map(({ creativePrompts, name, significance, type, description }) => (
						<GradientCard title="Item">
							<p>{name}</p>
							<p>{type}</p>
							<p>{significance}</p>
							<List items={description} title="Description" />
							<List items={creativePrompts} title="Creative Prompts" />
						</GradientCard>
					))
			}
			{
				twists &&
					twists.map(({ description, creativePrompts, impact, narrative_placement, twist_type }) => (
						<GradientCard title="Twist">
							<Chip color="blue">{twist_type}</Chip>
							<Chip color="blue">{impact}</Chip>
							<Chip color="blue">{narrative_placement}</Chip>
							<List items={creativePrompts} title="Creative Prompts" />
							<List items={creativePrompts} title="Creative Prompts" />
							<List items={description} title="Description" />
						</GradientCard>
					))
			}
			{
				requires &&
					requires.map(({ creativePrompts, description, relationType, prerequisites }) => (
						<GradientCard title="Requires">
							<Chip color="blue">{relationType}</Chip>
							<List items={description} title="Description" />
							<List items={creativePrompts} title="Creative Prompts" />
							{JSON.stringify(prerequisites, null, 2)}
						</GradientCard>
					))
			}
			{
				stages &&
					stages.map(
						({
							clues,
							completionPaths,
							creativePrompts,
							description,
							dramatic_moments,
							dramatic_question,
							encounters,
							location,
							locations,
							name,
							objectives,
							outgoingDecisions,
							sensory_elements,
							stage,
						}) => (
							<GradientCard title={`Stage ${stage}`}>
								<div class="flex flex-col gap-2">
									<h4 class="text-lg font-semibold">{name}</h4>
									<p>{dramatic_question}</p>
								</div>
								<List items={description} title="Description" />
								<List items={completionPaths} title="Completion Paths" />
								<List items={dramatic_moments} title="Dramatic Moments" />
								<List items={encounters} title="Encounters" />
								<List items={objectives} title="Objectives" />
								<List items={sensory_elements} title="Sensory Elements" />
								<List items={locations} title="Locations" />
								<List items={creativePrompts} title="Creative Prompts" />
								{outgoingDecisions.map(
									({
										dramatically_interesting,
										conditionType,
										conditionValue,
										consequences,
										creativePrompts,
										decision_type,
										description,
										failureDescription,
										name,
										narrativeTransition,
										options,
										potential_player_reactions,
										successDescription,
										toStage,
									}) => (
										<GradientCard title="Outgoing Decision">
											<Chip color="blue">{name}</Chip>
											<Chip color="blue">{decision_type}</Chip>
											<Chip color="blue">{conditionType}</Chip>
											<Chip color="blue">{conditionValue}</Chip>
											<List items={description} title="Description" />
											<List items={creativePrompts} title="Creative Prompts" />
											<List items={failureDescription} title="Failure Description" />
											<List items={successDescription} title="Success Description" />
											<List items={narrativeTransition} title="Narrative Transition" />
											<List items={potential_player_reactions} title="Potential Player Reactions" />
											<List items={options} title="Options" />
											{consequences.map(
												({
													consequence_type,
													creativePrompts,
													delay_factor,
													description,
													severity,
													visibility,
													affectedStageId,
												}) => (
													<GradientCard title={name}>
														<Chip color="blue">{consequence_type}</Chip>
														<Chip color="blue">{delay_factor}</Chip>
														<Chip color="blue">{severity}</Chip>
														<Chip color="blue">{visibility}</Chip>
														<List items={description} title="Description" />
														<List items={creativePrompts} title="Creative Prompts" />
													</GradientCard>
												),
											)}
										</GradientCard>
									),
								)}
								{clues.map(({ creativePrompts, description, discoveryCondition, reveals }) => {
									<GradientCard title="Clue">
										<p>{discoveryCondition}</p>
										<List items={description} title="Description" />
										<List items={creativePrompts} title="Creative Prompts" />
										<List items={reveals} title="Reveals" />
									</GradientCard>;
								})}
							</GradientCard>
						),
					)
			}
		</Fragment>
	</TwoColumnGrid>
</Layout>
