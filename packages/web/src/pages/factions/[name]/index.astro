---
import GradientCard from "@components/cards/GradientCard.astro";
import SecretCard from "@components/cards/SecretCard.astro";
import Icon from "@components/Icon.astro";
import { getFaction } from "@entities";
import Layout from "@layout";
import Button from "@components/Button.astro";
import { hasItems, hasItemsWithProperty, safeArrayAccess } from "@utils/dataHelpers";
import { getEntityUrl } from "@utils/slugs";

export const prerender = false;

const { name } = Astro.params;

if (!name) {
	return Astro.redirect('/factions');
}

const faction = await getFaction(name);

if (!faction) {
	return Astro.redirect('/404');
}

// Get first leader, if any
const firstLeader = safeArrayAccess(
	faction.members?.filter(member => member.status === 'leader'), 
	0
);

// Get first location, if any
const firstLocation = safeArrayAccess(faction.locations, 0);
---

<Layout title={faction.name}>
	<div class="max-w-4xl mx-auto">
		<div class="flex justify-between items-center mb-8">
			<div class="flex items-center">
				<Icon name="users" size="lg" color="indigo" class="mr-3" />
				<h1 class="text-4xl font-bold">{faction.name}</h1>
			</div>
			<div class="flex gap-4">
				<a 
					href={getEntityUrl('factions', faction.name, faction.id, 'edit')} 
					class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
				>
					<Icon name="pencil" class="mr-2" />
					Edit
				</a>
			</div>
		</div>
		
		<div class="grid grid-cols-3 gap-6 mb-10">
			{faction.type && (
				<GradientCard title="Type" icon="tag" colorTheme="blue">
					<p class="capitalize">{faction.type}</p>
				</GradientCard>
			)}
			
			{faction.alignment && (
				<GradientCard title="Alignment" icon="compass" colorTheme="purple">
					<p class="capitalize">{faction.alignment}</p>
				</GradientCard>
			)}
			
			{faction.territory && (
				<GradientCard title="Territory" icon="map" colorTheme="green">
					<p>{faction.territory}</p>
				</GradientCard>
			)}
		</div>

		<div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-10">
			<!-- Left Column - Main Info -->
			<div class="md:col-span-2 space-y-6">
				<!-- Description -->
				{hasItems(faction.description) && (
					<GradientCard title="Description" icon="file-text" colorTheme="blue">
						<div class="space-y-4">
							{faction.description?.map((paragraph: string) => (
								<p>{paragraph}</p>
							))}
						</div>
					</GradientCard>
				)}

				<!-- History -->
				{hasItems(faction.history) && (
					<GradientCard title="History" icon="book-open" colorTheme="amber">
						<div class="space-y-4">
							{faction.history?.map((paragraph: string) => (
								<p>{paragraph}</p>
							))}
						</div>
					</GradientCard>
				)}

				<!-- Goals -->
				<div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
					{faction.publicGoal && (
						<GradientCard title="Public Goal" icon="flag" colorTheme="green">
							<p>{faction.publicGoal}</p>
						</GradientCard>
					)}
					
					{faction.trueGoal && (
						<GradientCard title="True Goal" icon="lock" colorTheme="red">
							<p>{faction.trueGoal}</p>
						</GradientCard>
					)}
				</div>

				<!-- Members -->
				{hasItemsWithProperty(faction.members, 'npc') && (
					<GradientCard title="Notable Members" icon="users" colorTheme="purple">
						<div class="space-y-4">
							{faction.members.map((member: any) => (
								<div class="border-l-4 border-purple-500 pl-4 py-2">
									<div class="flex justify-between">
										<a 
											href={getEntityUrl('npcs', member.npc.name)} 
											class="text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline"
										>
											{member.npc.name}
										</a>
										{member.status && (
											<span class="text-gray-600 dark:text-gray-400 text-sm capitalize px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-full">
												{member.status}
											</span>
										)}
									</div>
									{member.role && (
										<p class="text-gray-700 dark:text-gray-300 mt-1">{member.role}</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)}

				<!-- Locations -->
				{hasItemsWithProperty(faction.locations, 'location') && (
					<GradientCard title="Locations" icon="map" colorTheme="green">
						<div class="space-y-4">
							{faction.locations.map((locationRel: any) => (
								<div class="border-l-4 border-green-500 pl-4 py-2">
									<a 
										href={getEntityUrl('locations', locationRel.location.name)} 
										class="text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline"
									>
										{locationRel.location.name}
									</a>
									{locationRel.description && locationRel.description.length > 0 && (
										<p class="text-gray-700 dark:text-gray-300 mt-1">{locationRel.description[0]}</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)}

				<!-- Faction Relationships -->
				{hasItemsWithProperty(faction.relationships, 'faction') && (
					<GradientCard title="Relationships with Other Factions" icon="git-branch" colorTheme="blue">
						<div class="space-y-4">
							{faction.relationships.map((relation: any) => (
								<div class="border-l-4 pl-4 py-2" class:list={[
									relation.type === 'ally' ? 'border-green-500' : '', 
									relation.type === 'enemy' ? 'border-red-500' : '',
									relation.type === 'neutral' ? 'border-gray-500' : ''
								]}>
									<div class="flex justify-between">
										<a 
											href={getEntityUrl('factions', relation.faction.name)} 
											class="text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline"
										>
											{relation.faction.name}
										</a>
										{relation.type && (
											<span class:list={[
												'text-sm capitalize px-2 py-1 rounded-full',
												relation.type === 'ally' ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200' : '',
												relation.type === 'enemy' ? 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200' : '',
												relation.type === 'neutral' ? 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300' : ''
											]}>
												{relation.type}
											</span>
										)}
									</div>
									{relation.description && relation.description.length > 0 && (
										<p class="text-gray-700 dark:text-gray-300 mt-1">{relation.description[0]}</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)}

				<!-- Quests -->
				{hasItemsWithProperty(faction.quests, 'quest') && (
					<GradientCard title="Quests" icon="file-text" colorTheme="green">
						<div class="space-y-4">
							{faction.quests.map((questRel: any) => (
								<div class="border-l-4 border-green-500 pl-4 py-2">
									<div class="flex justify-between">
										<a 
											href={getEntityUrl('quests', questRel.quest.name)} 
											class="text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline"
										>
											{questRel.quest.name}
										</a>
										{questRel.role && (
											<span class="text-gray-600 dark:text-gray-400 text-sm capitalize px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-full">
												{questRel.role}
											</span>
										)}
									</div>
									{questRel.interest && questRel.interest.length > 0 && (
										<p class="text-gray-700 dark:text-gray-300 mt-1">{questRel.interest[0]}</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)}
			</div>

			<!-- Right Column -->
			<div class="space-y-6">
				<!-- Headquarters -->
				{faction.headquarters && (
					<GradientCard title="Headquarters" icon="building" colorTheme="indigo">
						<p>{faction.headquarters}</p>
					</GradientCard>
				)}

				<!-- Resources -->
				{hasItems(faction.resources) && (
					<GradientCard title="Resources" icon="database" colorTheme="amber">
						<ul class="list-disc list-inside space-y-2 ml-4">
							{faction.resources?.map((resource: string) => (
								<li>{resource}</li>
							))}
						</ul>
					</GradientCard>
				)}

				<!-- Notes -->
				{hasItems(faction.notes) && (
					<GradientCard title="GM Notes" icon="clipboard" colorTheme="green">
						<div class="space-y-4">
							{faction.notes?.map((note: string) => (
								<p>{note}</p>
							))}
						</div>
					</GradientCard>
				)}
			</div>
		</div>
	</div>
</Layout>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const deleteButtons = document.querySelectorAll('.delete-faction');
		
		deleteButtons.forEach(button => {
			button.addEventListener('click', async () => {
				const factionId = button.getAttribute('data-faction-id');
				if (!factionId) return;
				
				if (confirm('Are you sure you want to delete this faction? This action cannot be undone.')) {
					try {
						const response = await fetch(`/api/factions/${factionId}`, {
							method: 'DELETE',
						});
						
						if (response.ok) {
							window.location.href = '/factions';
						} else {
							const error = await response.json();
							alert(`Error: ${error.message || 'Failed to delete faction'}`);
						}
					} catch (error) {
						console.error('Error deleting faction:', error);
						alert('An error occurred while trying to delete the faction. Please try again.');
					}
				}
			});
		});
	});
</script>