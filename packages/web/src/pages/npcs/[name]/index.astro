---
import GradientCard from "@components/cards/GradientCard.astro";
import Icon from "@components/Icon.astro";
import { getNpc } from "@entities";
import Layout from "@layout";
import { hasItems, hasItemsWithProperty, safeArrayAccess } from "@utils/dataHelpers";
import { getEntityUrl } from "@utils/slugs";

export const prerender = false;

const { name } = Astro.params;

if (!name) {
	return Astro.redirect('/npcs');
}

const npc = await getNpc(name);

if (!npc) {
	return Astro.redirect('/404');
}

// Get primary faction if any
const primaryFaction = safeArrayAccess(npc.factions, 0);

// Get primary location if any
const primaryLocation = safeArrayAccess(npc.locations, 0);
---

<Layout title={npc.name}>
	<div class="max-w-4xl mx-auto">
		<div class="flex justify-between items-center mb-8">
			<div class="flex items-center">
				<Icon name="user" size="lg" color="blue" class="mr-3" />
				<h1 class="text-4xl font-bold">{npc.name}</h1>
			</div>
			<div class="flex gap-4">
				<a 
					href={getEntityUrl('npcs', npc.name, npc.id, 'edit')} 
					class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
				>
					<Icon name="pencil" class="mr-2" />
					Edit
				</a>
			</div>
		</div>
		
		<!-- NPC Info Cards -->
		<div class="grid grid-cols-3 gap-6 mb-10">
			{npc.race && (
				<GradientCard title="Race" icon="user" colorTheme="blue">
					<p class="capitalize">{npc.race}</p>
				</GradientCard>
			)}

			{npc.occupation && (
				<GradientCard title="Occupation" icon="briefcase" colorTheme="purple">
					<p>{npc.occupation}</p>
				</GradientCard>
			)}

			{npc.gender && (
				<GradientCard title="Gender" icon="user" colorTheme="blue">
					<p class="capitalize">{npc.gender}</p>
				</GradientCard>
			)}
		</div>

		<!-- Main NPC Details -->
		<div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-10">
			<!-- Left Column - Core Details -->
			<div class="md:col-span-2 space-y-6">
				{hasItems(npc.descriptions) && (
					<GradientCard title="Description" icon="file-text" colorTheme="blue">
						<div class="space-y-4">
							{npc.descriptions?.map((paragraph: string) => (
								<p>{paragraph}</p>
							))}
						</div>
					</GradientCard>
				)}

				{hasItems(npc.background) && (
					<GradientCard title="Background" icon="book-open" colorTheme="amber">
						<div class="space-y-4">
							{npc.background?.map((paragraph: string) => (
								<p>{paragraph}</p>
							))}
						</div>
					</GradientCard>
				)}

				{hasItems(npc.motivation) && (
					<GradientCard title="Motivation" icon="target" colorTheme="red">
						<div class="space-y-4">
							{npc.motivation?.map((paragraph: string) => (
								<p>{paragraph}</p>
							))}
						</div>
					</GradientCard>
				)}

				{hasItems(npc.personalityTraits) && (
					<GradientCard title="Personality" icon="brain" colorTheme="purple">
						<ul class="list-disc list-inside space-y-2 ml-6">
							{npc.personalityTraits?.map((trait: string) => (
								<li>{trait}</li>
							))}
						</ul>
					</GradientCard>
				)}

				{/* Relationships */}
				{hasItemsWithProperty(npc.relationships, 'npc') && (
					<GradientCard title="Relationships" icon="users" colorTheme="green">
						<div class="space-y-4">
							{npc.relationships.map((relationship: any) => (
								<div class="border-l-4 border-green-500 pl-4 py-2">
									<a 
										href={getEntityUrl('npcs', relationship.npc.name)} 
										class="text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline"
									>
										{relationship.npc.name}
									</a>
									<p class="text-gray-700 dark:text-gray-300 mt-1">
										<span class="capitalize font-medium">{relationship.relationshipType}:</span> 
										{relationship.description && relationship.description.length > 0 && relationship.description[0]}
									</p>
								</div>
							))}
						</div>
					</GradientCard>
				)}

				{/* Quests */}
				{hasItemsWithProperty(npc.quests, 'quest') && (
					<GradientCard title="Quests" icon="file-text" colorTheme="green">
						<div class="space-y-4">
							{npc.quests.map((questRel: any) => (
								<div class="border-l-4 border-green-500 pl-4 py-2">
									<div class="flex justify-between">
										<a 
											href={getEntityUrl('quests', questRel.quest.name)} 
											class="text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline"
										>
											{questRel.quest.name}
										</a>
										{questRel.role && (
											<span class="text-gray-600 dark:text-gray-300 text-sm capitalize px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-full">
												{questRel.role}
											</span>
										)}
									</div>
									{questRel.notes && questRel.notes.length > 0 && (
										<p class="text-gray-700 dark:text-gray-300 mt-1">{questRel.notes[0]}</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)}

				{hasItems(npc.secrets) && (
					<GradientCard title="Secrets" icon="lock" colorTheme="red" hasSecret={true}>
						<ul class="list-disc list-inside space-y-2 ml-6">
							{npc.secrets?.map((secret: string) => (
								<li>{secret}</li>
							))}
						</ul>
					</GradientCard>
				)}
			</div>

			<!-- Right Column - Secondary Details -->
			<div class="space-y-6">
				{/* Primary Faction */}
				{primaryFaction?.faction && (
					<GradientCard title="Primary Faction" icon="users" colorTheme="blue">
						<div class="flex flex-col items-center text-center">
							<Icon name="flag" size="lg" class="mb-2" />
							<a 
								href={getEntityUrl('factions', primaryFaction.faction.name)} 
								class="text-lg font-semibold text-blue-600 dark:text-blue-400 hover:underline"
							>
								{primaryFaction.faction.name}
							</a>
							{primaryFaction.role && (
								<p class="text-gray-700 dark:text-gray-300 mt-2">{primaryFaction.role}</p>
							)}
							{primaryFaction.status && (
								<span class="mt-2 text-xs px-3 py-1 bg-blue-900 text-blue-200 rounded-full capitalize">
									{primaryFaction.status}
								</span>
							)}
						</div>
					</GradientCard>
				)}

				{/* Other Factions */}
				{hasItemsWithProperty(npc.factions, 'faction') && npc.factions.length > 1 && (
					<GradientCard title="Other Factions" icon="flag" colorTheme="indigo">
						<ul class="space-y-3">
							{npc.factions.slice(1).map((factionRel: any) => (
								<li class="flex justify-between items-center">
									<a 
										href={getEntityUrl('factions', factionRel.faction.name)} 
										class="text-blue-600 dark:text-blue-400 hover:underline"
									>
										{factionRel.faction.name}
									</a>
									{factionRel.status && (
										<span class="text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full capitalize">
											{factionRel.status}
										</span>
									)}
								</li>
							))}
						</ul>
					</GradientCard>
				)}

				{/* Locations */}
				{hasItemsWithProperty(npc.locations, 'location') && (
					<GradientCard title="Locations" icon="map" colorTheme="green">
						<div class="space-y-3">
							{npc.locations.map((locationRel: any) => (
								<div>
									<a 
										href={getEntityUrl('locations', locationRel.location.name)} 
										class="text-blue-600 dark:text-blue-400 hover:underline"
									>
										{locationRel.location.name}
									</a>
									{locationRel.context && locationRel.context.length > 0 && (
										<p class="text-gray-600 dark:text-gray-300 text-sm">{locationRel.context[0]}</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)}

				{/* Items */}
				{hasItems(npc.items) && (
					<GradientCard title="Items" icon="package" colorTheme="amber">
						<ul class="list-disc list-inside space-y-2 ml-4">
							{npc.items?.map((item: string) => (
								<li>{item}</li>
							))}
						</ul>
					</GradientCard>
				)}

				{/* Knowledge */}
				{hasItems(npc.knowledge) && (
					<GradientCard title="Knowledge" icon="lightbulb" colorTheme="amber">
						<ul class="list-disc list-inside space-y-2 ml-4">
							{npc.knowledge?.map((info: string) => (
								<li>{info}</li>
							))}
						</ul>
					</GradientCard>
				)}

				{/* Dialogue */}
				{hasItems(npc.dialogue) && (
					<GradientCard title="Dialogue" icon="message-circle" colorTheme="purple">
						<ul class="space-y-3">
							{npc.dialogue?.map((line: string) => (
								<li class="border-l-2 border-purple-500 pl-3 py-1 italic">"{line}"</li>
							))}
						</ul>
					</GradientCard>
				)}
			</div>
		</div>
	</div>
</Layout>