---
import GradientCard from "@components/cards/GradientCard.astro";
import Icon from "@components/Icon.astro";
import { getNpc } from "@entities";
import Layout from "@layout";
import {
	hasItems,
	hasItemsWithProperty,
	safeArrayAccess,
} from "@utils/dataHelpers";
import { getEntityUrl } from "@utils/slugs";
import TwoColumnGrid from "@components/TwoColumnGrid.astro";
import Chip, { type Props as ChipProps } from "@components/Chip.astro";

export const prerender = false;

const { slug } = Astro.params;

if (!slug) {
	return Astro.redirect("/npcs");
}

const npc = await getNpc(slug);

console.log(JSON.stringify(npc, null, 2));

if (!npc) {
	return Astro.redirect("/404");
}

const has = {
	descriptions: hasItems(npc.descriptions),
	personalityTraits: hasItems(npc.personalityTraits),
	background: hasItems(npc.background),
	motivation: hasItems(npc.motivation),
	secrets: hasItems(npc.secrets),
	knowledge: hasItems(npc.knowledge),
	dialogue: hasItems(npc.dialogue),
	items: hasItems(npc.items),
	significantItems: hasItemsWithProperty(npc.significantItems, "name"),
	factions: hasItemsWithProperty(npc.factions, "faction"),
	relations: hasItemsWithProperty(npc.relations, "npc"),
	locations: hasItemsWithProperty(npc.locations, "location"),
	quests: hasItemsWithProperty(npc.quests, "quest"),
};

const chipList = [
	{
		item: npc.race,
		label: "Race",
		color: "blue",
		icon: {
			name: "user",
			size: "lg",
			color: "blue",
			class: "mr-3",
		},
	},
	{
		item: npc.gender,
		label: "Gender",
		color: "indigo",
		icon: {
			name: "user",
			size: "lg",
			color: "indigo",
			class: "mr-3",
		},
	},
	{
		item: npc.occupation,
		label: "Occupation",
		color: "green",
		icon: {
			name: "briefcase",
			size: "lg",
			color: "green",
			class: "mr-3",
		},
	},
	{
		item: npc.role,
		label: "Role",
		color: "purple",
		icon: {
			name: "briefcase",
			size: "lg",
			color: "purple",
			class: "mr-3",
		},
	},
] satisfies ChipProps[] & { item: string | null }[];
---

<Layout title={npc.name}>
	<TwoColumnGrid title={npc.name}>
		<Fragment slot="header">
			{
				chipList.map((chip) => (
					<Chip color={chip.color} icon={chip.icon}>
						{chip.item}
					</Chip>
				))
			}
		</Fragment>

		<Fragment slot="left-column">
			<GradientCard title="Basic Information" icon="info" colorTheme="blue">
				<div class="grid grid-cols-2 md:grid-cols-4 gap-x-8 gap-y-4">
					{
						npc.race && (
							<div>
								<p class="text-sm text-gray-500">Race</p>
								<p class="font-medium capitalize">{npc.race}</p>
							</div>
						)
					}
					{
						npc.gender && (
							<div>
								<p class="text-sm text-gray-500">Gender</p>
								<p class="font-medium capitalize">{npc.gender}</p>
							</div>
						)
					}
					{
						npc.occupation && (
							<div>
								<p class="text-sm text-gray-500">Occupation</p>
								<p class="font-medium">{npc.occupation}</p>
							</div>
						)
					}
					{
						npc.role && (
							<div>
								<p class="text-sm text-gray-500">Role</p>
								<p class="font-medium">{npc.role}</p>
							</div>
						)
					}
					{
						npc.quirk && (
							<div class="col-span-2">
								<p class="text-sm text-gray-500">Quirk</p>
								<p class="font-medium">{npc.quirk}</p>
							</div>
						)
					}
				</div>
			</GradientCard>

			{
				has.descriptions && (
					<GradientCard title="Description" icon="eye" colorTheme="blue">
						<div class="space-y-4">
							{npc.descriptions?.map((paragraph) => (
								<p>{paragraph}</p>
							))}
						</div>
					</GradientCard>
				)
			}

			{
				has.personalityTraits && (
					<GradientCard title="Personality" icon="heart" colorTheme="red">
						<ul class="list-disc list-inside space-y-2 ml-4">
							{npc.personalityTraits?.map((trait) => (
								<li>{trait}</li>
							))}
						</ul>
					</GradientCard>
				)
			}

			{
				has.background && (
					<GradientCard title="Background" icon="book" colorTheme="amber">
						<div class="space-y-4">
							{npc.background.map((paragraph) => (
								<p>{paragraph}</p>
							))}
						</div>
					</GradientCard>
				)
			}

			{
				has.motivation && (
					<GradientCard title="Motivation" icon="target" colorTheme="green">
						<div class="space-y-4">
							{npc.motivation.map((m) => (
								<p>{m}</p>
							))}
						</div>
					</GradientCard>
				)
			}

			{
				has.secrets && (
					<GradientCard title="Secrets" icon="lock" colorTheme="purple">
						<ul class="list-disc list-inside space-y-2 ml-4">
							{npc.secrets.map((secret) => (
								<li>{secret}</li>
							))}
						</ul>
					</GradientCard>
				)
			}

			{
				has.knowledge && (
					<GradientCard title="Knowledge" icon="book-open" colorTheme="indigo">
						<ul class="list-disc list-inside space-y-2 ml-4">
							{npc.knowledge?.map((info) => (
								<li>{info}</li>
							))}
						</ul>
					</GradientCard>
				)
			}

			{
				has.dialogue && (
					<GradientCard
						title="Dialogue Lines"
						icon="message-circle"
						colorTheme="blue"
					>
						<ul class="list-disc list-inside space-y-2 ml-4">
							{npc.dialogue?.map((line) => (
								<li class="italic">"{line}"</li>
							))}
						</ul>
					</GradientCard>
				)
			}
			{
				has.significantItems && (
					<GradientCard
						title="Significant Items"
						icon="briefcase"
						colorTheme="purple"
					>
						<div class="space-y-4">
							{npc.significantItems.map((item) => (
								<div class="border-l-4 border-purple-500 pl-4 py-2">
									<h4 class="font-semibold text-lg">{item.name}</h4>
									<p class="text-sm text-gray-600 dark:text-gray-400 italic">
										{item.type}
									</p>
									{item.description && item.description.length > 0 && (
										<div class="mt-2 space-y-2">
											{item.description.map((para) => (
												<p>{para}</p>
											))}
										</div>
									)}
									<p class="mt-2 text-sm">
										<span class="font-medium">Significance:</span>{" "}
										{item.significance}
									</p>
									{item.quest && (
										<p class="mt-1 text-sm">
											<span class="font-medium">Related Quest:</span>{" "}
											<a
												href={getEntityUrl("quests", item.quest.name)}
												class="text-blue-600 dark:text-blue-400 hover:underline"
											>
												{item.quest.name}
											</a>
										</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)
			}

			{
				has.items && (
					<GradientCard title="Items" icon="package" colorTheme="blue">
						<ul class="list-disc list-inside space-y-2 ml-4">
							{npc.items?.map((item) => (
								<li>{item}</li>
							))}
						</ul>
					</GradientCard>
				)
			}
		</Fragment>

		<Fragment slot="right-column">
			{/* Primary Faction & Location Card */}
			{
				has.factions && (
					<GradientCard title="Connections" icon="link" colorTheme="green">
						{npc.factions.map((factionRel) => {
							const { faction, status, role } = factionRel;
							const { name } = faction;

							return (
								<div class="space-y-4">
									<div>
										<p class="text-sm text-gray-500 mb-1">Factions</p>
										<p class="font-medium flex items-center">
											<Icon name="flag" class="mr-1" />
											<a
												href={getEntityUrl("factions", name)}
												class="text-blue-600 dark:text-blue-400 hover:underline"
											>
												{name}
											</a>
											{status && (
												<span class="ml-2 text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full capitalize">
													{status}
												</span>
											)}
										</p>
										{role && (
											<p class="text-sm text-gray-600 dark:text-gray-400 mt-1 ml-5">
												Role: {role}
											</p>
										)}
									</div>
								</div>
							);
						})}
					</GradientCard>
				)
			}

			{
				has.locations && (
					<GradientCard title="Locations" icon="map" colorTheme="green">
						{npc.locations.map((locationRel) => {
							const { location, context } = locationRel;
							const { name } = location;

							return (
								<div>
									<p class="text-sm text-gray-500 mb-1">Primary Location</p>
									<p class="font-medium flex items-center">
										<Icon name="map-pin" class="mr-1" />
										<a
											href={getEntityUrl("locations", name)}
											class="text-blue-600 dark:text-blue-400 hover:underline"
										>
											{name}
										</a>
										{context && context.length > 0 && (
											<ul class="list-disc list-inside space-y-2 ml-4">
												{context.map((contextItem) => (
													<li class="text-sm text-gray-600 dark:text-gray-400 mt-1">
														{contextItem}
													</li>
												))}
											</ul>
										)}
									</p>
								</div>
							);
						})}
					</GradientCard>
				)
			}

			{
				has.relations && (
					<GradientCard title="Relationships" icon="users" colorTheme="blue">
						<div class="space-y-4">
							{npc.relations.map((relationship) => (
								<div>
									<div class="flex items-center justify-between">
										<a
											href={getEntityUrl("npcs", relationship.npc.name)}
											class="text-blue-600 dark:text-blue-400 hover:underline"
										>
											{relationship.npc.name}
										</a>
										{relationship.relationshipType && (
											<span class="text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full">
												{relationship.relationshipType}
											</span>
										)}
									</div>
									{relationship.description &&
										relationship.description.length > 0 && (
											<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
												{relationship.description[0]}
											</p>
										)}
								</div>
							))}
						</div>
					</GradientCard>
				)
			}

			{
				has.locations && (
					<GradientCard title="Known Locations" icon="map" colorTheme="green">
						<ul class="space-y-3">
							{npc.locations.map((locationRel) => {
								const { location, context } = locationRel;
								const { name } = location;

								return (
									<li>
										<a
											href={getEntityUrl("locations", name)}
											class="text-blue-600 dark:text-blue-400 hover:underline"
										>
											{name}
										</a>

										{context && context.length > 0 && (
											<ul class="list-disc list-inside space-y-2 ml-4">
												{context.map((contextItem) => (
													<li class="text-sm text-gray-600 dark:text-gray-400 mt-1">
														{contextItem}
													</li>
												))}
											</ul>
										)}
									</li>
								);
							})}
						</ul>
					</GradientCard>
				)
			}

			{
				has.quests && (
					<GradientCard
						title="Involved Quests"
						icon="map-pin"
						colorTheme="amber"
					>
						<div class="space-y-3">
							{npc.quests.map((questRel) => (
								<div>
									<div class="flex justify-between items-center">
										<a
											href={getEntityUrl("quests", questRel.quest.name)}
											class="text-blue-600 dark:text-blue-400 hover:underline"
										>
											{questRel.quest.name}
										</a>
										{questRel.role && (
											<span class="text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full">
												{questRel.role}
											</span>
										)}
									</div>
									{questRel.notes && questRel.notes.length > 0 && (
										<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
											{questRel.notes[0]}
										</p>
									)}
								</div>
							))}
						</div>
					</GradientCard>
				)
			}
		</Fragment>

		<Fragment slot="footer">
			<script>
				document.addEventListener("DOMContentLoaded", () => {
					const deleteButton = document.querySelector(".delete-npc");
					if (!deleteButton) return;

					deleteButton.addEventListener("click", async () => {
						const npcId = deleteButton.getAttribute("data-npc-id");
						if (!npcId) return;

						if (!confirm("Are you sure you want to delete this NPC?")) return;

						try {
							const response = await fetch(`/api/npcs/${npcId}`, {
								method: "DELETE",
							});

							if (response.ok) {
								window.location.href = "/npcs";
							} else {
								const data = await response.json();
								throw new Error(data.error || "Failed to delete NPC");
							}
						} catch (error) {
							console.error("Error:", error);
							alert("An error occurred while deleting the NPC");
						}
					});
				});
			</script>
		</Fragment>
	</TwoColumnGrid>
</Layout>
