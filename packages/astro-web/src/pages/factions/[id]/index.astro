---
import Layout from '../../../layouts/Layout.astro';
import { db } from '../../../lib/db';
import { factions } from '@tome-keeper/shared';
import { eq } from 'drizzle-orm';

export const prerender = false;

const { id } = Astro.params;
const faction = await db.select().from(factions).where(eq(factions.id, Number(id))).get();

if (!faction) {
	return Astro.redirect('/factions');
}
---

<Layout title={faction.name}>
	<div class="max-w-4xl mx-auto">
		<div class="flex justify-between items-center mb-8">
			<h1 class="text-4xl font-bold">{faction.name}</h1>
			<div class="flex gap-4">
				<a 
					href={`/factions/${faction.id}/edit`} 
					class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
				>
					Edit
				</a>
				<button
					type="button"
					data-faction-id={faction.id}
					class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 delete-faction"
				>
					Delete
				</button>
			</div>
		</div>
		
		<div class="bg-white shadow rounded-lg p-6 mb-8">
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
				<div>
					<h2 class="text-lg font-semibold text-gray-700">Basic Information</h2>
					<div class="mt-2 grid grid-cols-2 gap-4">
						<div>
							<p class="text-sm text-gray-500">Type</p>
							<p>{faction.type}</p>
						</div>
						{faction.alignment && (
							<div>
								<p class="text-sm text-gray-500">Alignment</p>
								<p>{faction.alignment}</p>
							</div>
						)}
						{faction.headquarters && (
							<div>
								<p class="text-sm text-gray-500">Headquarters</p>
								<p>{faction.headquarters}</p>
							</div>
						)}
					</div>
				</div>
				
				{faction.territory && (
					<div>
						<h2 class="text-lg font-semibold text-gray-700">Territory</h2>
						<p class="mt-2 whitespace-pre-line">{faction.territory}</p>
					</div>
				)}
			</div>
			
			<div class="space-y-6">
				{faction.description && (
					<div>
						<h2 class="text-lg font-semibold text-gray-700">Description</h2>
						<p class="mt-2 whitespace-pre-line">{faction.description}</p>
					</div>
				)}
				
				{faction.publicGoal && (
					<div>
						<h2 class="text-lg font-semibold text-gray-700">Public Goal</h2>
						<p class="mt-2 whitespace-pre-line">{faction.publicGoal}</p>
					</div>
				)}
				
				{faction.trueGoal && (
					<div>
						<h2 class="text-lg font-semibold text-gray-700">True Goal (Secret)</h2>
						<p class="mt-2 whitespace-pre-line">{faction.trueGoal}</p>
					</div>
				)}
				
				{faction.history && (
					<div>
						<h2 class="text-lg font-semibold text-gray-700">History</h2>
						<p class="mt-2 whitespace-pre-line">{faction.history}</p>
					</div>
				)}
				
				{faction.notes && (
					<div>
						<h2 class="text-lg font-semibold text-gray-700">Notes</h2>
						<p class="mt-2 whitespace-pre-line">{faction.notes}</p>
					</div>
				)}
			</div>
		</div>
		
		<div class="flex justify-between">
			<a href="/factions" class="text-blue-600 hover:text-blue-800">
				&larr; Back to Factions
			</a>
		</div>
	</div>
</Layout>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const deleteButton = document.querySelector('.delete-faction');
		if (!deleteButton) return;
		
		deleteButton.addEventListener('click', async () => {
			const factionId = deleteButton.getAttribute('data-faction-id');
			if (!factionId) return;

			if (!confirm('Are you sure you want to delete this faction?')) return;

			try {
				const response = await fetch(`/api/factions/${factionId}`, {
					method: 'DELETE'
				});

				if (response.ok) {
					window.location.href = '/factions';
				} else {
					const data = await response.json();
					throw new Error(data.error || 'Failed to delete faction');
				}
			} catch (error) {
				console.error('Error:', error);
				alert('An error occurred while deleting the faction');
			}
		});
	});
</script> 