---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";

// Define color themes
export type ColorTheme =
  | "blue"    // Default blue-cyan-teal
  | "green"   // Green-emerald-teal
  | "purple"  // Purple-violet-indigo
  | "amber"   // Amber-orange-yellow
  | "red"     // Red-rose-orange
  | "gray"    // Gray scale
  | "cyan"    // Cyan-sky-blue
  | "pink";   // Pink-fuchsia-rose

// Define the gradient card variants using CVA
const gradientCard = cva("bg-white/40 dark:bg-gray-800/40 rounded-lg border border-gray-200/70 dark:border-gray-700/50 shadow-lg backdrop-blur-md overflow-hidden", {});

// Define the header variants using CVA
const cardHeader = cva("flex items-center justify-between p-4 border-b backdrop-blur-md", {
  variants: {
    colorTheme: {
      blue: "border-indigo-200/50 dark:border-indigo-700/50 bg-gradient-to-r from-indigo-50/80 via-blue-50/80 to-indigo-100/70 dark:from-indigo-900/40 dark:via-blue-900/40 dark:to-indigo-800/30",
      green: "border-green-200/50 dark:border-green-800/50 bg-gradient-to-r from-green-50/60 via-emerald-50/60 to-green-100/60 dark:from-green-900/30 dark:via-emerald-900/30 dark:to-green-800/20",
      purple: "border-indigo-200/50 dark:border-indigo-700/50 bg-gradient-to-r from-indigo-50/80 via-purple-50/80 to-indigo-100/70 dark:from-indigo-900/40 dark:via-purple-900/40 dark:to-indigo-800/30",
      amber: "border-amber-200/50 dark:border-amber-700/50 bg-gradient-to-r from-amber-50/60 via-orange-50/60 to-amber-100/60 dark:from-amber-800/30 dark:via-orange-800/30 dark:to-amber-700/20",
      red: "border-red-200/50 dark:border-red-700/50 bg-gradient-to-r from-red-50/60 via-rose-50/60 to-red-100/60 dark:from-red-900/30 dark:via-rose-900/30 dark:to-red-800/20",
      gray: "border-gray-300/50 dark:border-gray-500/50 bg-gradient-to-r from-gray-50/60 via-gray-100/60 to-gray-200/60 dark:from-gray-700/30 dark:via-gray-600/30 dark:to-gray-500/20",
      cyan: "border-sky-200/50 dark:border-sky-700/50 bg-gradient-to-r from-cyan-50/80 via-sky-50/80 to-indigo-100/70 dark:from-cyan-900/40 dark:via-sky-900/40 dark:to-indigo-800/30",
      pink: "border-pink-200/50 dark:border-pink-700/50 bg-gradient-to-r from-pink-50/60 via-fuchsia-50/60 to-pink-100/60 dark:from-pink-900/30 dark:via-fuchsia-900/30 dark:to-pink-800/20",
    },
  },
  defaultVariants: {
    colorTheme: "blue",
  },
});

// Define the title color variants
const titleColor = cva("text-xl font-semibold", {
  variants: {
    colorTheme: {
      blue: "text-gray-800 dark:text-teal-300",
      green: "text-gray-800 dark:text-green-200",
      purple: "text-gray-800 dark:text-violet-200",
      amber: "text-gray-800 dark:text-amber-200",
      red: "text-gray-800 dark:text-rose-200",
      gray: "text-gray-800 dark:text-gray-200",
      cyan: "text-gray-800 dark:text-sky-200",
      pink: "text-gray-800 dark:text-pink-200",
    },
  },
  defaultVariants: {
    colorTheme: "blue",
  },
});

// Define the icon color variants
const iconColor = cva("mr-2 text-xl", {
  variants: {
    colorTheme: {
      blue: "text-teal-300",
      green: "text-green-500",
      purple: "text-violet-500",
      amber: "text-amber-500",
      red: "text-rose-500",
      gray: "text-gray-500",
      cyan: "text-sky-500",
      pink: "text-pink-500",
    },
  },
  defaultVariants: {
    colorTheme: "blue",
  },
});

export interface Props extends Omit<HTMLAttributes<"div">, "slot">, VariantProps<typeof cardHeader> {
  title?: string;
  icon?: string;
  rightContent?: string;
  customHeaderClass?: string;
  customBodyClass?: string;
  customGradient?: string;
}

const {
  colorTheme = "blue",
  title,
  icon,
  rightContent,
  customHeaderClass,
  customBodyClass = "",
  customGradient,
} = Astro.props;

// Override the header class if a custom one is provided
const headerClassName = customHeaderClass || cardHeader({ colorTheme });
const iconClassName = iconColor({ colorTheme });
const titleClassName = titleColor({ colorTheme });
---

<div class={gradientCard()}>
  <div class={customGradient ? `flex items-center justify-between p-4 border-b backdrop-blur-md ${customGradient}` : headerClassName}>
    <div class="flex items-center justify-between w-full">
      <div class="flex items-center">
        {icon && <span class={iconClassName} set:html={icon} />}
        {title && <h2 class={titleClassName}>{title}</h2>}
      </div>
      {rightContent && <div set:html={rightContent} />}
      <!-- If there's headerSlot content, render it instead of title/icon -->
      <slot name="header" />
    </div>
  </div>

  <div class={`p-4 ${customBodyClass}`}>
    <slot />
  </div>
</div>