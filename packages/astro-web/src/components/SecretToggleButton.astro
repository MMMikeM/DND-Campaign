---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";

// Define the button variants using CVA
const secretButton = cva(
  "px-2 py-1 text-sm font-medium rounded-full transition-colors cursor-pointer flex items-center", 
  {
    variants: {
      showSecret: {
        true: "bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 hover:bg-green-200 dark:hover:bg-green-700",
        false: "bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-200 hover:bg-red-200 dark:hover:bg-red-700",
      },
    },
    defaultVariants: {
      showSecret: false,
    }
  }
);

// Define the props interface
export interface Props extends HTMLAttributes<"button">, VariantProps<typeof secretButton> {
  showSecret: boolean;
  className?: string;
}

// Destructure the props with defaults
const { 
  showSecret,
  className = "",
} = Astro.props;

// Eye icon SVG paths
const EyeIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>`;

const EyeSlashIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>`;
---

<button
  type="button"
  class={secretButton({ showSecret, className })}
  aria-label={showSecret ? "Hide secret content" : "Show secret content"}
  data-state={showSecret ? "visible" : "hidden"}
>
  <span>DM Only</span>
  <span class="ml-1">
    {showSecret ? 
      <Fragment set:html={EyeSlashIcon} /> : 
      <Fragment set:html={EyeIcon} />
    }
  </span>
</button>

<script>
  // Client-side JavaScript to handle the toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButtons = document.querySelectorAll('[data-state]');
    
    toggleButtons.forEach(button => {
      button.addEventListener('click', () => {
        const currentState = button.getAttribute('data-state');
        const newState = currentState === 'visible' ? 'hidden' : 'visible';
        
        // Toggle the state
        button.setAttribute('data-state', newState);
        
        // Update classes based on state
        if (newState === 'visible') {
          button.classList.remove('bg-red-100', 'dark:bg-red-800', 'text-red-800', 'dark:text-red-200', 'hover:bg-red-200', 'dark:hover:bg-red-700');
          button.classList.add('bg-green-100', 'dark:bg-green-800', 'text-green-800', 'dark:text-green-200', 'hover:bg-green-200', 'dark:hover:bg-green-700');
        } else {
          button.classList.remove('bg-green-100', 'dark:bg-green-800', 'text-green-800', 'dark:text-green-200', 'hover:bg-green-200', 'dark:hover:bg-green-700');
          button.classList.add('bg-red-100', 'dark:bg-red-800', 'text-red-800', 'dark:text-red-200', 'hover:bg-red-200', 'dark:hover:bg-red-700');
        }
        
        // Update the icon
        const iconSpan = button.querySelector('span.ml-1');
        if (iconSpan) {
          iconSpan.innerHTML = newState === 'visible' 
            ? `${EyeSlashIcon}` 
            : `${EyeIcon}`;
        }
        
        // Update the aria-label
        button.setAttribute('aria-label', newState === 'visible' ? 'Hide secret content' : 'Show secret content');
        
        // Dispatch a custom event that other components can listen for
        const event = new CustomEvent('secretToggled', { 
          detail: { state: newState === 'visible' },
          bubbles: true 
        });
        button.dispatchEvent(event);
      });
    });
  });
  
  // Define the Eye icons for use in JS
  const EyeIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>`;

  const EyeSlashIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>`;
</script>